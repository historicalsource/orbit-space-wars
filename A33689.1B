	.TITLE SPACWR-SPACE WAR 6/8/78 ORR
	.ASECT
	.RADIX 16
	.SBTTL GAME DESCRIPTION & ALLOCATION
	;****************************
	;****************************
	;THE GAME OF SPACE WAR
	;
	;STARTED 6/8/78
	;****************************
	.REPT 0
*PROJECT #:	5U211
*
*DISK #:	29
*
*
*HARDWARE:	MODIFIED MACH 8/16
*
*MEMORY:	SEE BELOW UNDER DEFINITIONS
*
*
*INTERRUPTS:	NMI 4/FRAME IRQ-VBLANK (FOR OUTPUT)
*
*ASSEMBLY:	UNDER MAC68
*		FILE: SPACWR
*
*LINK:		UNDER LINKM
*		LINK WITH: SPACGR,SPAC68
*
*DESCRIPTION:	THIS IS A 2 PLAYER GAME OF SPACE WAR.  PLAYERS
*		TRY TO DESTROY OPPONENTS SHIP BY SHOOTING PHOTON
*		TORPEDOES AT EACH OTHER.  A COMPLETELY DESTROYED
*		SHIP SCORES 1 POINT.
	;****************************
	.ENDR

	.SBTTL	PAGE 0 BLOCK ALLOCATION
	;PAGE 0:
	;
	.GLOBL GRV1,GRV2	;GRAVITY EQUATES FROM SPACGR
;COIN ROUTINE GLOBLS
	.GLOBL	$COINA,$LAM,$LMBIT
	.GLOBL	$CNSTT,$PSTSL
	.GLOBL	$LMTIM,$CNCT
	.GLOBL	COIN68
;DIAGNOSTIC GLOBLS
	.GLOBL	DIAG,PLAYF,TOO,CLRS,TESTPAT,VBLANK,PICTURE,PANL2
	.GLOBL	WTDOG,X1,X2,X3,R0,NMI,IRQ,START
;
;PAGE 0 ALLOCATION
;
OBJH:	.BLKB 10		;16 ORJECT HORIZ
OBJV:	.BLKB 10		;VERTICAL
OBJHL:	.BLKB 10		;LSBH (POSITION)
OBJVL:	.BLKB 10		;LSBV (POSITION)
OBJHV:	.BLKB 10		;HORIZ VELOCITY
OBJHVL:	.BLKB 10		;LSB H VELOCITY
OBJVV:	.BLKB 10		;VERT VELOCITY
OBJVVL:	.BLKB 10		;LSB VERT VELOCITY
DIR:	.BLKB 10		;DIRECTION (PICTURE)
STAT:	.BLKB 10		;OBJECT'S STATUS (SEE PAGE 4)
J:	.BLKB 1			;HOLDS COSINE FROM TABLE
R0:	.BLKB 1			;TEMP REGISTER
R1:	.BLKB 1			;MOTHER REGISTER
TPTR:	.BLKB 2			;USED TO BUILD TABLE POINTERS
X1:	.BLKB 2			;TEMPORARY IX HOLDERS
X2:	.BLKB 2
X3:	.BLKB 2
HOLDHV:	.BLKB 1			;HOLD HORIZ VELOCITY IN 
HOLDVV:	.BLKB 1			;AS ABOVE FOR VERTICAL
TSTHV:	.BLKB 1			;COLLISION PARAMETERS HOLD
TSTHVL:	.BLKB 1			;AND DECELERATION HOLD BYTES
TSTVV:	.BLKB 1
TSTVVL:	.BLKB 1
TSTV:	.BLKB 1
TSTH:	.BLKB 1
ROCKD:	.BLKB 1			;DELAY ON NEXT SPACE ROCK
TIME:	.BLKB 1			;FRAME COUNTER
SYNC:	.BLKB 1			;VBLANK SYNC WORD
TSP:	.BLKB 2			;NMI STACK POINTER HOLDER
TIX:	.BLKB 2			;NMIIX HOLDER #1
TIX2:	.BLKB 2			;NMI IX HOLDER #2
SPEED:	.BLKB 1			;BULLETS SPEED (CALLS TO ACEL)
ACCEL:	.BLKB 1			;ACCEL SPEED TIME MASK
MAXV:	.BLKB 1			;DECEL SPEED TIME MASK
WRNMK:	.BLKB 1			;WARN MASK (IF BIT SET, ALREADY WARNED)
				;D3=SHIP 1, LOW SHOTS
				;D2=SHIP 1, LOW FUEL
				;D1=SHIP 0, LOW SHOTS
				;D0=SHIP 0, LOW FUEL
OPEN:	.BLKB 1			;OPTION STATUS BYTE 1 (SELECTED IF BIT=1)
				;D7 = 0 = FREE SPACE / 1 = REBOUND
				;D6=NEG GRAV
				;D5=NO GRAVITY
				;D4=BLACK HOLE
				;D3=SPACE STATIONS (1=YES,0=NO)
				;D2=UNLIMITED FUEL & SHOTS (1=Y,0=NO)
				;D1=STARS (1=YES, 0=NO)
				;D0=STRONG GRAV (1=STRONG,0=EASY)
OPEN2:	.BLKB 1			;OPTION BYTE 2
				;D7=INSTANT FULL SPEED (FOR GAMES 0, 1 & 2)
				;D6=NO GRAV UNTILL THRUST,SHIP 0
				;D5=SAME AS D6, SHIP 1
				;D0=PARTIAL BRAKES (GAMES 3 & 4)
TIMES:	.BLKB 1			;LENGTH (TIME) OF ACTIVE SHELLS
ROTS:	.BLKB 1			;ROTATION SPEED MASK
ENDDLY:	.BLKB 1			;TIME BEFORE NEXT HEAT (AFTER A SHIP DESTRUCTION)
POLY:	.BLKB 1			;POLY COUNTER BYTE
FLAG:	.BLKB 1			;GEN PURPOSE FLAG (DON'T BET ON THIS BEING ANYTHING)
SHOT0:	.BLKB 1			;SHOTS REMAINING
SHOT1:	.BLKB 1
FUEL0:	.BLKB 1			;FUEL REMAINING
FUEL1:	.BLKB 1
HYPT0:	.BLKB 1			;HYPERSPACE TIMERS
HYPT1:	.BLKB 1
SNDLR:  .BLKB 1		;RIGHT & LEFT SOUND LEVELS (EXPLOSIVE)
SNDLL:	.BLKB 1
FIRES:  .BLKB 1			;FIRE SHOT SOUND TIMER
MOD:	.BLKB 1			;IF NOT 0, PANEL ENTRY IS A MOD, 0=SELECT MOD ONLY
DELAY:	.BLKB 1			;DELAY BYTE BEFORE ACCEPTING MODS (& USED FOR SOUND BEEP)
WARN:	.BLKB 1			;WARNING BEEP TIMER
LANG:	.BLKB 1			;OBVIOUSLY LANGUAGE (X2)
MASK:	.BLKB 1			;USED BY OUTPUT ROUTINE TO MASK STATUS BITS
FRAME:	.BLKB 1			;FRAME COUNTER FOR CLOCK
STRBLK:	.BLKB 2			;POINTS TO NEXT TABLE LOC
				;FOR NEXT START TO BLINK

CHANGE:	.BLKB 1			;OUTPUT CHANGE FLAG FOR CLOCK (TELLS WHEN TO OUTPUT AGAIN)
SWT1:	.BLKB 1			;TOUCH SWITCH DEBOUNCE AND CHANGE BYTE
SWT2:	.BLKB 1			;SAME FOR OTHER INPUT SWITCH 
HEATT:  .BLKB 1			;HEAT TIME FOR SCORE/STATUS DISPLAY
;COIN ROUTINE WORDS
$CNSTT:	.BLKB 2			;COIN TIMERS
$PSTSL:	.BLKB 2			;POST COIN SLAM
$LMTIM:	.BLKB 1			;PRE SLAM TIMERS
$CNCT:	.BLKB 1			;COIN COUNTERS
SECOND: .BLKB 1			;GAME TIME REMAINING (BCD MINUTES/SECONDS)
MINUTE:	.BLKB 1
MINUTC:	.BLKB 1			;MINUTES CHECK CONTROL BYTE
GMSTAT:	.BLKB 1			;GAME STATUS (D7=ACTIVE ATTRACT, D6=WAIT FOR START)
				;D5-D0=FREEZE TIME IF D6 & D7=0)
SCORE1:	.BLKB 1			;PLAYERS SCORES
SCORE0:	.BLKB 1
ATRACT:	.BLKB 1			;ATTRACT TIME RESET
TOWR:	.BLKB 0			;TOP OF WORKING RAM POINTER

	.SBTTL	EQUATES
	;************************
	;DEFINITIONS & EQUATES:
	;
	;SWITCHES ARE ACTIVE 0
IN08	=0800
	;SWITCH 0 (FOR PLAYER 0)
	;D7=COIN SW 0
	;D6=SLAM SWITCH
	;D5=TRIGGER SW
	;D4=HYPERSPACE
	;D3=LEFT
	;D2=RIGHT
	;D1=UP(FOWARD THRUST)
	;D0=SPARE
$LAM	=0800
	;SLAM ADDRESS
$LMBIT	=40
	;SLAM BIT
IN10	=1000
	;SWITCH 1 (FOR PLAYER 1)
	;D7 THRU D2 SAME AS ABOVE
	;EXCEPT D6=TEST SWITCH
TSTSW	=1000
TSTBIT	=40
IN18	=1800
	;OPTION SWITCHES
	;D7 THRU D0=OPTION (BOARD) SWITCHES
	;D6=SPARE
	;D5=FREE PLAY (1=YES)
	;D3&D4=LANGUAGE
	;D2=1/2 PRICE OPTION
	;D0&D1=TIME PER COIN
PANL1	=2800
	;PANEL SWITCH
	;TOUCH SWITCHES 0 THRU 7
	;D7=SWITCH 0,ETC
	;SEE PG 0, 'OPEN' FOR DESC. OF SWITCH OPTIONS
PANL2	=2000
	;D7=VBLANK (EQUATED, BELOW)
	;D6=NEXT (DIAGNOSSTIC)
	;D5=DIAGNOSTIC SELECT
	;D4=HEAT RESET
	;D3=SCREEN REFLECT BIT(1=MIRROR)
	;D2=TOUCH SWITCH 8
	;D1=TOUCH SWITCH 9
	;D0=GAME RESET
	;
LEDLTCH =3C09
	;LATCHES DATA FOR LEDS TO OUTPUT LATCH
	;SETS LED /TOUCH BUS TO OUTPUT
	;DATA SETS LEDS ON OR OFF
	;0=ON,1=OFF
LEDST0	=3C0B
	;BUS STORBE GOES TO 0
	;NOTE: THIS ALSO LATCHES THE ACC
	;TO THE DATA LATCH
	;THIS ADDRESS CHANGES THE DIRECTION
	;OF THE BUS TO OUTPUT; PUT THE TOUCH
	;SWITCH IN "TRI=STATE"
LEDST1	=3C0A
	;BUS STROBE TO 1
	;COMPLETES STROBE PALSE
	;NOTE: THIS ALSO LATCHES THE ACC
	;TO THE DATA LATCH
SWST0	=3C08
	;CHANGES THE LED/TOUCH SWITCH BUS
	;FROM OUTPUT (AS ABOVE) TO INPUT
	;SO THE SWITCHES MAY BE READ.
VBLANK	=2000
	;VBLANK INPUT LOCATION
NOSRST	=3E00
	;WRITE NOISE RESET
WTDOG	=3F00
	;WATCH DOG TIMER RESET
PLAYF	=3000
	;UPPER LEFT PLAYFIELD CORNER (43BF=LOWER RIGHT CORNER)
PICTURE	=33C0
	;SEE ABOVE 'ROTTBL' ON PG 38 FOR PICTURE BIT DESCRIPTIONS
	;PICTURE INFO OUTPUT 0
	;33C4=PICTURE #1
	;33C8=PICTURE #2
	;THRU
	;33FC=PICTURE #F
VPOS	=33C1
	;VERTICAL INFO OUTPUT 0
	;33C5=#1
	;THRU
	;33FD=#F
HPOS	=33C2
	;HORIZ INFO OUTPUT 0
	;33C6=#1
	;THRU
	;33FE=#F
	;
HLFSP	=33C3
	;HALF SPEC PICTURE INFO
	;D7=8X(16 OR 32) SELECT (1=8X16)
	;D6=TOP/BOTTOM SELECT (1=TOP HALF)
	;D5,D4,D3,D2 NOT USED
	;D1=STRETCH (2 WIDE) (0=NORM)
	;D0=ALT PICTURE ROM SELECT (SHIPS IN D0=0)
;
;SPECIAL NOTE:	OBJECT 0 IS OUTPUT TO TOP OF MOTION RAM (33FC-33FF)
;		WHILE OBJECT 15. IS OUTPUT TO BOTTOM (33C0-33C3).
TOO	=33FF
	;TOP OF MOTION OBJECT OUTPUT LOCATIONS
TOSP	=00FF
	;TOP OF STACK
	;
	;PROGRAM ADDRESSES AVAILABLE
	;	ROM 1 = 6000 (NOT USED)
	;	ROM 2 = 6800
	;	ROM 3 = 7000
	;	ROM 4 = 7800
	;
	;VECTORS IN ROM 4
	;
OUT20	=3C02
	;COIN LOCKOUT DROP, +1 TO ENERGIZE
OUT28	=3C04
	;NMI OFF, +1 FOR NMI'S ON
HTRSTL	=3C06
	;HEAT RESET LED (+1 FOR ON)
HYPLED	=3C0C
	;HYPER SPACE LED (+1 FOR ON)
BUZZ	=3C0E
	;WARNING BUZZER (+1 FOR ON)
NOTE	=3800
	;MUSIC NOTE
AMPL	=3A00
	;MUSIC NOTE AMPLITUDE
	;MSB NIBBLE=CHAN2
	;LSB NIBBLE=CHAN1
NOISE	=3900
	;WHITE NOISE AMPLITUDE
	;MSB NIBBLE CHAN2
	;LSB NIBBLE CHAN1
	;
TOS	=0EF			;TOP OF SCREEN (MOTION OBJECT LIMITS)
BOS	=05			;BOTTON OF SCREEN
LOS	=05			;RIGHT EDGE OF SCREEN
ROS	=0EF			;LEFT LEDGE OF SCREEN
DIAM0	=1			;NOSE HIT DIAMETER
DIAM	=5			;DIAMETER OF OBJECT
SUNA	=35D0			;ALPHA-FIELD SUN LOCATION
SUN	=80			;SUN ON SCREEN (MOTION OBJ POSITION)
SUNPIC	=01C			;SUN PICTURE SEQ START (THERE ARE 3)
EXPIC	=10			;EXPLOSION START(ROM 2)
BULPIC	=00			;BULLET (IN ROM 2)
LASTEXP	=20			;LAST EXPLOSION PICTURE (ROM 2)
STNPIC	=0A			;SPACE STATION PIC @ A&B (ROM 2)
TPCPL	=3628			;TIME PER COINS OUTPUT LOCATION
GMOVPL  =3788			;GAME OVER OUTPUT LOCATION
SCPL0	=37A0			;OUTPUT PLACE FOR SCORE PLAYER 0
SCPL1	=37BC			;OUTPUT FOR 1
CLKPLC  =37AD			;OUTPUT LOC FOR CLOCK
CRIPLE	=15			;CRIPLED SHIP SPEED (AND PARTIAL BRAKE SPEED)
COLON	=24			;COLON PICTURE
SMCOLN	=21			;SMALL COLON PIC
ROCK	=01			;SPACE ROCK PIC (+1 FOR EXPLODING) (ROM2)
LEXPRK	=09			;LAST IN SEQUENCE OF EXPLODING ROCK (ROM2)
STARPC	=1F			;STAR PIC (ALPHA CHAR)
TESTPAT	=2F			;TEST PATTERN IN ROM 2
BLKPIC	=0E			;BLANK PIC (IN ROM 2)
LITTLE	=25			;VALUE STORED TO 'FLAG' FOR LITTLE NUMBERS
LARGE	=30			;LARGE NUMBERS
;COIN ROUTINE ADDRESS
$COINA	=0800			;COIN 1 ADDRESS (OTHER +800 AWAY)
;
;PICTURE INFO
;	SPACE SHIPS ARE 2-8X32 PICS NEXT TO EACH OTHER.  ROTATIONS ARE
;	PICS 0-7 (LEFT HALF) & 10-17 (RIGHT HALF).  EACH SHIP USES 1/2
;	OF THE TOTAL 32 LENGTH, SO "2" HALF PICTURES ARE HELD IN PICTURE
;	0, ETC.
;	BY USING THE 'HLFSP' BYTE, ONE OF TWO SHIPS CAN BE DISPLAYED IN
;	PICTURE 0.  FOR EXAMPLE:  PUT UP OBJ0 & OBJ1 NEXT TO EACH OTHER.
;	SET OBJ0 TO PIC0, OBJ1 TO PIC10.  STORE AN 80 IN 'HLFSP' FOR BOTH
;	OBJECTS.  ONLY 1 SHIP WILL BE SEEN.  BY STORING AN 0C0 INTO 'HLFSP'
;	OF BOTH OBJECTS, THE OTHER SHIP WILL APPEAR.
;	PICTURES (EITHER TOP OR BOTTOM) IN HALF MODE ALWAYS SHOW TOP JUSTIFIED
;
;
;
	.REPT 0
SPECIAL PROGRAM NOTE:
	THROUGH OUT THE PROGRAM YOU WILL NOTE THAT THE IX REGISTER
	IS USED TO POINT TO A NUMBER OF DIFFERENT ITEMS IN A 
	SINGLE ROUTINE. SINCE IN A 6800 IT IS EASIER TO DO A 
	'DEX BNE' RATHER THAN A 'DEX CPX I,0FFFF BNE', THE IX
	IS USUALLY (NOT ALWAYS) POINTED 1 PAST THE OBJECT DESIRED.
	A PROBLEM COULD ARISE IF ANY OF THESE ROUTINES ARE USED ON
	HARDWARE THAT DOES NOT MAP PAGE 1 TO PAGE 0: WHEN REFERING
	TO THE OBJECT AT '00' IN THIS WAY, A SAMPLE INSTRUCTION
	WOULD LOOK LIKE  'LDAA	X,OBJH-1'. THIS ASSEMBLES TO THE
	CODE A6 FF. NOTE THAT IF THE IX = 2 (FOR EXAMPLE) THAT THE
	LOAD IS ACTUALLY FROM 101, NOT 01. KEEP THIS IN MIND IF ANY
	OF THESE ROUTINE ARE TO BE USED ELSE WHERE.
	.ENDR


	.SBTTL	OBJECT SET UP
	.REPT 0
OBJECT SET UP:  THE 16 MOTION OBJECTS ARE SET UP AS FOLLOWS:

     OBJECT #			      USAGE
     ========			      =====

	0			PLAYER 0 SHIP
	1			PLAYER 1 SHIP
	2			OTHER HALF OF SHIP, PLAYER 0
	3			OTHER HALF OF SHIP, PLAYER 1
	4			BULLET 0, PLAYER 0
	5			BULLET 0, PLAYER 1
	6			BULLET 1, PLAYER 0
	7			BULLET 1, PLAYER 1
	8			BULLET 2, PLAYER 0
	9			BULLET 2, PLAYER 1
	10.			BULLET 3, PLAYER 0
	11.			BULLET 3, PLAYER 1
       12.			EXPLOSION 0, PLAYER 0
       13.			EXPLOSION 0, PLAYER 1
       14.			STATION 1 (OR SPACE ROCK)
       15.			STATION 2
	.ENDR
;EQUATES FOR ABOVE
SHIP0	=0
SHIP1	=1
SHIPHF	=2
BULT0	=4
BULT1	=6
BULT2	=8
BULT3	=10.
EXPP0	=12.
STION1	=14.
STION2	=15.
	.SBTTL	STATUS BYTE MEANING
	.REPT	0
STATUS WORD SET UP:

	DATA BIT #			USAGE (SHOWN WHEN 1)
	==== === =			===== ====== ==== ==

	    7				ACTIVE
	    6				DESTROYED
	    5				IN HYPER SPACE
	    4				EDGE SENSE ON HYPER BUTTON
	    3				EDGE SENSE ON BULLET FIRE
	    2				CRIPPLED 1
	    1				CRIPPLED 2 (BOTH=NOISE CONE)
	    0				THRUST ON
	.ENDR

	.SBTTL NMI ROUTINE
	.=6962
CKM1:	.BYTE 0BC		;CHECK SUM 6800-6BFF (-1)
NMI:	JSR	COIN68
	STAA	E,WTDOG
;VALID MINUTE COUNT?
	LDAA	D,MINUTC	;DECIMAL SUB
	LDAB	I,99
	SUBB	D,MINUTES
	INCA
	ABA
	DAA
	LSRA			;0 OR 1 -> 0
	BNE	10$		;ALL ELSE WRONG
	LDAA	D,MINUTES	;OK, UPDATE
	STAA	D,MINUTC
	LDAA	D,$CNCT
	BEQ	4$
	CMPA	I,3
	BLT	5$
	CLR	E,$CNCT
	BRA	4$
5$:	DEC	E,$CNCT
;CHECK & UPDATE MINUTES CHECK BYTE
	LDAA	I,0A		;SOUND ON COIN
	STAA	D,DELAY
	LDAA	E,IN18		;TIME OPTION
	ANDA	I,07
	ASLA
	STAA	D,TIX+1
	LDAA	I,TIMOPT&0FF00/100	;GET TIME PER COIN AMOUNT
	STAA	D,TIX
	LDX	D,TIX
	LDAB	X,TIMOPT&0FF
	LDAA	D,SECOND
	ADDA	X,TIMOPT&0FF+1
	DAA
	CMPA	I,59		;SECONDS ARE BASE 60
	BLS	1$
	SUBA	I,60
	INCB
1$:	STAA	D,SECOND
	TBA			;A=MINUTES TO ADD
	CMPB	I,5
	BGE	10$		;4 IS MAX ADD
	ADDA	D,MINUTES
	DAA
;IS THIS A REASONABLE ADD FOR MINUTES?
	STAA	D,MINUTES	;STORE SUPPOSED GOOD TIME
	TBA			;COPY OF MINUTES TO ADD
	ADDA	D,MINUTC	;ADD TO OTHER COPY
	DAA
	TAB			;SAVE COPY OF CHECK
	SUBA	D,MINUTES	;MAY DIFF IS -1
	BEQ	11$
	INCB
	INCA
	BNE	10$		;DIFF > 1
11$:	STAB	D,MINUTC
	CMPB	I,90		;TOO LARGE?
	BCS	2$
10$:	WAI			;MUST BE A GLITCH (A WHAT???)
2$:	LDAA	D,GMSTAT
	BMI	4$		;GAME ON?
	LDAA	I,40
	STAA	D,GMSTAT	;IF NO, SET FOR START
	JMP	GO		;RESTART ON NEW COIN
4$:
;
;NOTE WARNING SYSTEN & SHOT SOUND CONTROL
;
	LDAA	D,WARN		;NEED A WARNING?
	BNE	7$		;YES
6$:
	STAB	E,BUZZ
	BRA	8$
7$:	LDAB	D,TIME		;YES, BUT IS IT ON OR OFF TIME?
	BITB	I,4		;CHECK TIME BIT
	BNE	6$		;OFF TIME
	STAB	E,BUZZ+1
8$:
;
;SHOT CONTROL
;
	LDAA	D,FIRES		;SHOT SOUND NEEDED?
	BEQ	12$		;NO
	SUBA	I,2		;SHOT NOTE & TIMER DOWN BY 2
	STAA	E,NOTE		;OUTPUT
	CMPA	I,0B0		;DONE?
	BHI	9$
	CLR	E,AMPL
	CLRA			;TIMER TO 0
9$:	STAA	D,FIRES
12$:
;
;OUT OF BOUNDS CHECK
;
	TSX			;READ STACK
	LDAA	X,5		;HIGH BYTE
	CMPA	I,80		;OVER TOP?
	BCC	15$		;OUT OF BOUNDS
	CMPA	I,68
	BCS	15$
	RTI
	.SBTTL IRQ ROUTINE
15$:	WAI			;BAD ADDR
IRQ:
;
;OBJECT OUTPUT ROUTINE
;
OUTPUT:	LDX	I,1		;16 OBJECTS
	STS	D,TSP		;SAVE STACK
	LDS	I,TOO		;SET STACK TO TOP OF OUTPUT
3$:	STX	D,TIX		;GET HALF SPEC WORDS
	LDAA	D,TIX+1		;GET OFFSET AMOUNT FOR TABLES
	STAA	D,TIX2+1
	LDX	D,TIX2
	LDAB	X,HSTBL&0FF	;GET HLFSP BYTE
	LDAA	X,MSKTBL&0FF
	STAA	D,MASK
	LDX	D,TIX		;RESTORE IX
	LDAA	X,STAT-1	;ACTIVE
	ANDA	D,MASK
	BMI	5$
4$:	CLRA			;INACTIVE OBJECTS
	PSHA
	PSHA
	PSHA
	PSHA			;INACTIVE @ 0,0
	BRA	50$
5$:	BITA	I,20		;HYPER SPACE
	BNE	4$
	BITA	I,40		;DESTROYED
	BEQ	6$
	ORAB	I,1		;ALT RAM IF DESTROYED
	PSHB			;SPECIAL OUTPUT FOR DESTRUCT
	LDAA	X,OBJH-1
	PSHA
	LDAA	X,OBJV-1
	PSHA
	LDAA	I,BLKPIC		;BLANK SHIP PIC
	BRA	19$
6$:	PSHB			;STUFF 1/2 SPEC WORD
	LDAA	X,OBJH-1
	PSHA			;STUFF HORIZ
	LDAA	X,OBJV-1
	PSHA			;STUFF VERTICAL
	LDAA	X,DIR-1		;GET PIC CODE
	LDAB	D,TIX+1
	CMPB	I,SHIPHF+2	;SHIP PIC?
	BGT	19$
7$:	LDAB	X,STAT-1	;GET STATUS
	STAA	D,TIX2+1		;SAVE STATUS
	LDX	D,TIX2
	LDAA	X,ROTTBL&0FF	;PIC INFO
	BITB	I,2		;DAMMAGE 1
	BEQ	8$
	ORAA	I,8		;ALT PIC SELECT
8$:	BITB	I,4		;DAMMAGE 2
	BEQ	9$
	ORAA	I,20		;ALT PIC SELECT
9$:	TAB			;SAVE A
	ANDB	I,28		;CHECK FOR NO DAMMAGE
	BEQ	11$		;IF 0, NO DAMMAGE
	EORB	I,28		;JUST NOSE?
	BEQ	11$		;IF NOW EQ, YES, JUST NOSE
	LDAB	D,TIX2+1	;GET ROTATION (IT WAS SAVED ABOVE)
;
;HERE IS WHAT HAPPENS NOW:
;	SINCE PICTURES IN ALL ROTATIONS ARE DRAWN BY
;	FLIPPING THE PICTURES OF QUAD 1 ACCORDINGLY,
;	ANY NON-SEMETRICAL DAMMAGE WILL APPEAR TO
;	'FLIP' ALSO. THERE FOR, FOR QUADS 2&4, A
;	PICTURE OF THE DAMMAGE JUST OPPISITE OF WHAT
;	IS THERE IS NEEDED. LUCKY FOR US, WE JUST HAPPEN
;	TO HAVE PICTURES OF DAMMAGE TO BOTH LEFT AND RIGHT
;	FINS. SO THE TRICK IS TO DETERMIN WHEN YOU ARE IN
;	QUADS 2&4 AND CHANGE THE PICS ACCORDINGLY.
;
	CMPB	I,16		;EDGE OF QUAD 4
	BLT	10$
	EORA	I,28		;SWAP DAMMAGE PICS
10$:	CMPB	I,0E		;EDGE OF QUAD 2
	BGT	11$
	CMPB	I,8		;CHECK OTHER EDGE
	BLT	11$
	EORA	I,28		;SWAP DAMMAGE PICS
11$:	LDAB	D,TIX+1		;CHECK FOR ALT PIC HALF (OBJECT #)
	CMPB	I,SHIPHF+1		;ALT SHIP HALF PIC?
	BLT	12$		;NO
	CMPB	I,SHIPHF+2		;COULD BE??????
	BLE	16$		;YEP
12$:	BITA	I,40		;H FLIPPED?
	BEQ	18$
	ORAA	I,10		;IF YES, THIS IS ALT PIC SIDE
	BRA	18$
16$:	BITA	I,40		;WHAT ABOUT THIS SIDE?
	BNE	18$
	ORAA	I,10
18$:	LDX	D,TIX
19$:	PSHA			;OUTPUT PIC
50$:	INX
	CPX	I,17.		;LAST OBJECT +1
	BEQ	51$
	JMP	E,3$
51$:	LDS	D,TSP		;RESTORE STACK
	CLRB
	LDAA	D,OPEN		;BLACK HOLE?
	BITA	I,10
	BNE	55$
	LDAA	D,TIME		;WHICH SW PIC
	LDAB	I,1C
	LSRA
	BCC	55$		;EVEN FRAMES, WHICH PICTURES
	CLRB
	BITA	I,06		;EVERY 3, BLANK PICTURES
	BEQ	55$
	LDAB	I,1E
	BITA	I,08		;ON OTHER FRAMES, WHICH PIC?
	BEQ	55$
	DECB
55$:	STAB	E,SUNA
	INC	E,SYNC		;IRQ HAPPENED
	JSR	RAND
	RTI

	.SBTTL MAIN CALLING ROUTINE
;************************************************
;MAIN CALLING LOOP
;************************************************
;
;RAM IS ASSUMED ALL 0'S ON FIRST ENTRY TO THIS AREA
;
GO:	LDS	I,0FF		;START PROCESSING
;
;PROGRAM RUN START
;
	JSR	INIT		;RESTART ALL
	CLI			;ALLOW VBLANK INTERRUPTS TO OCCURE
	STAA	E,OUT28+1	;NMI'S ON
MAIN:	LDAA	E,IN10
	BITA	I,TSTBIT
	BNE	1$
2$:	WAI
1$:
	LSR	E,SYNC		;WAIT FOR VBLANK
	BCC	MAIN
	STAA	E,WTDOG
	INC	E,TIME
	LDAA	D,LANG		;MEMORY BLITZ CHECK
	LSRA
	BCS	2$		;NO ODD LANGUAGES
	CMPA	I,3
	BGT	2$
	JSR	MOTION		;DO MOTION AT ONCE!!!
	JSR	TIMER
;
;MOTION CALLS:
;	MOTION, KEEPUP, STAT2 (AS PART OF KEEPUP)
;
;TIMER CALLS:
;	TIMER, SWITCH
	LDAA	D,CHANGE
	BEQ	30$		;IF NO CLOCK CHANGE, SKIP
	CLR	E,CHANGE	;ACKNOWLEDGE
	LDAA	I,LITTLE	;OUTPUT TIMER
	STAA	D,FLAG		;NO 0 BLANK
	LDX	I,CLKPLC	;LOCATION
	LDAB	D,GMSTAT
	BNE	10$
	CLRA
	STAA	D,FLAG		;CLOCK OFF
	BRA	20$
10$:	LDAA	I,SMCOLN
20$:	STAA	X,2		;OUTPUT COLON
	LDAA	D,MINUTES	;NOW TIME
	JSR	CONVT
	INX
	LDAA	D,SECONDS
	JSR	CONVT
30$:	LDAA	D,DELAY		;PUSH BUTTON DELAY?
	BEQ	50$		;ALREADY 0?
	DECA
	CMPA	I,07		;TIME FOR TONE CHANGE?
	BNE	40$
	LDAB	D,GMSTAT
	BEQ	40$		;SKIP IF OFF
	LDAB	D,POLY		;GET SOME RANDOM NOTE
	STAB	E,NOTE
	PSHA
	DEC	E,AMPL
	PULA
40$:	STAA	D,DELAY
	BNE	50$
	CLR	E,AMPL
50$:	LDAA	D,GMSTAT
	ASLA			;SELECT MODE?
	BMI	70$
;JSR ORBIT STARTS A CHAIN: ORBIT,
;GRAV,BOOM,SCROUT,BLINK
	JSR	ORBIT
	LDAA	D,TIME		;FRAME COUNT
	ANDA	I,0F		;RESTART CHECK MASK
	BNE	6$
	LDAB	D,WARN
	BEQ	55$
	DEC	E,WARN
55$:	LDAB	D,HEATT
	BEQ	56$
	DEC	E,HEATT
56$:	LDAB	D,GMSTAT	;GAME ON?
	BLE	58$		;IF -, OR 0, IN ATTRACT OR  GAME PLAY
	DECB			;NO, SO MUST BE FREEZE (DEC TIME)
	STAB	D,GMSTAT
	BNE	58$
	JSR	INIT
58$:	JSR	EXPOUT		;DO EXPLOSION (IF NEEDED) &
				;CHECK FOR SHIP RESTART (CHAINED)
6$:	ANDA	I,3		;SHELL TIME
	BNE	70$
	JSR	ENDSHL
;
;IN GRAV GAMES, GRAV DOES NOT AFFECT A SHIP
;UNTIL THAT PLAYER HAS PUSHED HIS THRUST BUTTON
;
70$:	LDAB	I,0FF
	LDAA	D,STAT
	LSRA			;THRUST?
	BCC	80$
	ANDB	I,0BF		;SET (TURN ON ) GRAV
80$:	LDAA	D,STAT+1
	LSRA
	BCC	90$
	ANDB	I,0DF
90$:	ANDB	D,OPEN2
	STAB	D,OPEN2
	LDAA	E,IN18		;FREE PLAY?
	BITA	I,20
	BNE	92$		;NO LOCKOUT FOR FREE PLAY
	LDAA	D,MINUTES
	BPL	91$
92$:	STAA	E,OUT20		;LOCKOUT AT 80 MINUTES OR ABOVE
	BRA	ATTRACT
91$:	STAA	E,OUT20+1

	.SBTTL ATTRACT ROUTINE
ATTRACT:LDAA	D,GMSTAT
	BPL	9$
15$:	JMP	MAIN
9$:	LDAB	E,IN18		;READ FREE PLAY SWITCH
	BITB	I,20		;FREE/
	BNE	5$		;YES
	LDAB	I,6		;NOT ON, WRITE 'INSERT COINS'
	LDX	I,TPCPL+1D
	JSR	DSPLY
5$:	TSTA
	BNE	15$
	LDAA	D,TIME		;TIME 0 FOR THINGS TO HAPPEN?
	BNE	3$
	INC	E,DIR		;TURN SHIP DURING ATTRACT
	INC	E,DIR+1
	LDAA	D,ATRACT	;ATTRACT TIMER
	DECA			;0?
	STAA	D,ATRACT
	BNE	10$	
	JSR	INIT		;IF 0, RESET ALL
	BRA	10$
3$:	ANDA	I,08F		;SET ATTRACT SPECS
	BNE	2$
	LDAA	I,0A0
	STAA	D,TIMES
	LDAA	I,1
	STAA	D,SPEED
	DECA
	STAA	D,OPEN2		;ALLOW GRAVITY DURING ATTRACT
	LDX	I,1
	JSR	FIRE		;FIRE SHOTS
	INX
	JSR	FIRE
10$:	LDAA	D,POLY
;FLASH RANDOM IN ATTRACT
	STAA	E,HYPLED+1	;FLASH CONTROL LEDS
	BITA	I,10
	BNE	11$
	STAA	E,HYPLED
11$:	STAA	E,HTRSTL+1
	BITA	I,2
	BNE	12$
	STAA	E,HTRSTL
12$:	ANDA	I,0F7		;NO SPACE STATIONS
	ORAA	I,2		;STARS ALWAYS ON
	STAA	D,OPEN		;KEEP THINGS CHANGING
2$:	LDAA	E,IN18		;READ OPTION SWITCHES
	TAB			;GET LANGUAGE BITS OUT
	ASLA			;OPTIONS X2
	LSRB
	LSRB
	ANDB	I,06			;LANG TIMES 2
	CMPB	D,LANG		;CHANGE?
	BEQ	4$
	STAB	D,LANG
	JSR	CLRS		;WIPE CLEAN
4$:	LDX	I,TPCPL+20	;GUESS OUTPUT FOR FREE PLAY
	LDAB	I,2		;MESSAGE 2
	BITA	I,40		;FREE? (ITS BEEN SHIFTED)
	BNE	6$
	ANDA	I,0E
	STAA	D,TPTR+1
	LDAB	I,TIMOPT&0FF00/100
	STAB	D,TPTR
	LDX	D,TPTR
	LDAA	I,LARGE		;LARGE #'S
	STAA	D,FLAG
	LDAA	X,TIMOPT&0FF	;MINUTES
	LDAB	X,TIMOPT&0FF+1	;SECONDS
	LDX	I,TPCPL		;TIME PER COIN LOCATION
	JSR	CONVT
	LDAA	I,COLON		;COLON PIC
	STAA	X,0
	INX
	TBA
	JSR	CONVT
	LDAB	I,1		;MESSAGE 1
	INX
7$:	JSR	DSPLY
1$:	JMP	MAIN
6$:	STAA	E,OUT20		;LOCKOUT BUT IN FREE PLAY
	BRA	7$

	.SBTTL UTILITY ROUTINES
	.SBTTL	CLOCK ROUTINE
;DECIMAL CLOCK
TIMER:	LDAA	D,GMSTAT
	BPL	SWITCH		;SKIP IF OFF
	LDAA	D,SECOND	;SECONDS
	ORAA	D,MINUTE
	CLC
	BEQ	2$		;IF 0, SKIP & TURN OFF GAME
	DEC	FRAME		;FRAME COUNT
	BGT	SWITCH
	INC	E,CHANGE		;OUTPUT CLOCK ON CHANGE
	LDAA	I,60.
	STAA	FRAME		;60 FRAMES
	LDAA	SECONDS
	ADDA	I,99		;SUBTRACT 1
	DAA
	SEC			;CARRY TO DEC MINUTES
	BPL	1$
	LDAA	I,59
	CLC			;NO CARRY
1$:	STAA	SECONDS
	LDAA	MINUTE
	ADCA	I,99
	DAA
	STAA	MINUTE
	ORAA	SECOND
	BNE	SWITCH
	LDX	I,0		;GAME OVER
	STX	D,MOD
	STX	D,OBJVV
	STX	D,OBJHV		;STOP SHIP
	STX	D,STAT+STION1	;REMOVE STATIONS
	STX	E,AMPL
	JSR	CLRS		;CLEAR SCREEN
	JSR	STARS		;TURN STARS ON
	LDAA	D,OPEN		;REMOVE STATIONS
	ANDA	I,0E7		;TURN ON SUN
	ORAA	I,22		;NO GRAV & STARS ON
	STAA	D,OPEN
	STAA	E,HTRSTL
	STAA	E,HYPLED		;CONTROL LITES OFF
	LDX	I,GMOVPL
	LDAB	I,4
	JSR	DSPLY
	LDAA	I,3F		;FREEZE TIME & GAME OFF
2$:	STAA	D,GMSTAT
;NOW FALL THRU & READ SWITCHES

	.SBTTL	SWITCH ROUTINE

;**************************************
;* SWITCH READ & ACTION ROUTINE
;*
;* THIS ROUTINE READS BOTH INPUT SWITCHES
;* AND THEN CALLS CERTAIN SUBROUTINES DE-
;* PENDING ON WHICH SWITCHES ARE PUSHED.
;* AFTER THAT, THE TOUCH PANEL IS READ AND
;* ACTED UPON IF NECESSARY.
;*
;* A,B, & IX CHANGED
;*
;* PAGE 0:
;*	VARIOUS MOTION & STATUS WORDS
;*	CHANGED OPTION WORD (OPEN) UPDATED
;*	NEW HEAT TIMER (ENDPLY) POSSIBLY CHANGED
;*	GAME NUMBER (GAME) POSSIBLY CHANGED
;*	GAME STATUS (GMSTAT) POSSIBLY CHANGED
;*	ALL GAME OPTIONS COULD BE CHANGED:
;*	  (ROTS,ACCEL,SPEED,TIMES & MAXV)
;*	TPTR UPDATED & USED (2 BYTES)
;*
;* SUBROUTINE POSSIBLY CALLED:
;*	FIRE,HYPST,ROTATE,ACELS,INIT
;*
;* STACK (WORST CASE):	8 BYTES
;*
;**************************************
SWITCH:	STAA	E,WTDOG
	LDAA	D,GMSTAT
	ASLA
	BMI	3$		;SELECT 1
	BCC	3$		;ACTIVE/
2$:	LDAA	D,MOD		;IF SELECT MODE,
	BNE	1$
3$:	JMP	PANL
	;(D#) INDICATES BIT IN D7 POSITIN OF BYTE
1$:	LDX	I,2		;2 PLAYERS
	LDAA	E,IN08		;PLAYER 0
	PSHA			;SAVE THIS FOR NEXT
	LDAA	E,IN10		;PLAYER 1
10$:	ASLA			;DON'T CARE ABOUT COIN (D6)
	LDAB	X,STAT-1	;GET PLAYER STATUS
	BITB	I,40		;IF DESTROYED.....
	BNE	55$		;NO ACTION
	ASLA			;FIRE?(D4)
	BMI	20$		;NOT PUSHED?
	BITB	I,8		;TORP PUSHED, WAS IT OFF BEFORE
	BNE	30$		;IF ALREADY PUSHED, DO NOTHING
	ORAB	I,8		;SET BIT
	JSR	FIRE		;FIRE A BULLET
	BRA	30$
20$:	ANDB	I,0F7		;TURN OFF FIRE BIT
30$:	ASLA			;CHECK HYPERSPACE (D4)
	BMI	31$
	BITB	I,30		;ALREADY IN?
	BNE	33$
	JSR	HYPST		;HYPERSPACE START
	ORAB	I,10		;SET EDGE BIT
	BRA	33$
31$:	ANDB	I,0EF		;TURN BIT OFF
33$:	STAB	X,STAT-1	;REPLACE STATUS
	LDAB	I,-1		;ROTATE SOMETHING OR OTHER LEFT(COUNTER CLOCKWISE)
	ASLA			;READ LEFT(D3)
	BMI	34$		;LEFT NOT PUSHED
	ASLA			;THROW AWAY RIGHT, NOT NEEDED
	BRA	35$		;AND DO LEFT ROTATE
34$:	ASLA			;NOT LEFT, IS IT RIGHT?
	BMI	50$
	NEGB
35$:	JSR	ROTATE		;UPDATE DIRECTION
50$:	ASLA			;THRUST?(D1)
	BMI	54$
	LDAB	D,OPEN
	BITB	I,4		;UNLIMITED FUEL?
	BNE	51$
	LDAA	X,FUEL0-1
	BEQ	91$
51$:	LDAB	X,STAT-1	;THRUST ON
	BITB	I,20		;IN HYPER SPACE
	BNE	54$
	ORAB	I,1
	STAB	X,STAT-1
	LDAB	D,TIME
	BITB	D,ACCEL		;TIME TO SPEED UP
	BNE	55$
	JSR	ACELS		;IF YES, ACCEL SHIP
	BRA	55$
54$:	LDAB	X,STAT-1	;THRUST OFF
90$:	ANDB	I,0FE
	STAB	X,STAT-1
91$:	LDAB	D,OPEN2		;INSTANT?
	BPL	55$		;NO
;GAME IN INSTANT START/STOP
	CLR	X,OBJVV-1
	CLR	X,OBJHV-1
55$:	DEX			;NEXT OBJECT
	BEQ	PANL		;IF 0, WERE DONE
	PULA			;GET OTHER SWITCH WORD
	BRA	10$
;
;NOW READ PANEL
;
PANL:
;
;OUTPUT OPTIONS TO LED PANEL
;
	LDAA	D,OPEN
	BITA	I,20		;NO GRAV?
	BEQ	1$		;IF 0, GRAV IS ON
	ANDA	I,0BE		;GRAV OFF, GRAV OPTIONS OFF
	STAA	D,OPEN
1$:	COMA			;0=ON, 1=OFF
	STAA	E,LEDLTCH	;LATCH DATA
	STAA	E,LEDST0	;STROBE BUS ON
	STAA	E,LEDST1
	STAA	E,SWST0
	LDAA	E,IN18		;OPTIONS
	BITA	I,20		;FREE PLAY?
	BNE	2$
	LDAA	D,GMSTAT
	ANDA	I,0C0		;LOOK @ SELECT & ON ONLY
	BEQ	67$
2$:	LDAA	D,DELAY
	BNE	67$
	LDAA	E,PANL1
	LDAB	D,MOD		;MOD TIME?
	BEQ	70$		;IF 0, GAME SELECT....
	CMPA	D,SWT1		;HAS CHANGED OCCURED ON THIS SWITCH?
	BEQ	60$		;NO SO SKIP
	STAA	D,SWT1		;YES, RECORD AND CONTINUE
	TAB			;ELSE MOD TIME
	INCB			;SWITCHES ALL OFF (0FF+1=0)?
	BEQ	60$
	LDAB	I,9		;SET DELAY
	STAB	D,DELAY
	COMA			;LIGHT UP CHANGED BIT3
	PSHA			;HOLD A
	ANDA	I,2		;LOOK ONLY AT STAR OPTION BIT
	BEQ	4$		;IF 0, NO CHANGE HERE
	EORA	D,OPEN		;CHANGE IN STARS OCCURED?
	BITA	I,2		;LOOK AT THE BIT
	BEQ	3$		;YES, JUST WENT OFF
	JSR	STARS		;YES, JUST CAME ON
	BRA	4$
3$:	JSR	CLRS		;ELSE CLEAR SCREEN
4$:	PULA			;GET ORIGINAL A BACK
	PSHA			;SAVE AGAIN
	ANDA	I,8		;DO SAME AS ABOVE, BUT THIS TIME FOR STATIONS
	BEQ	6$		;IF 0, NO CHANGE HERE
	EORA	D,OPEN		;WAS THE CHANGE ON OR OFF?
	BITA	I,8
	BEQ	5$		;JUST TURNED OFF
	JSR	SPSTN2		;JUST TURNED ON
	BRA	6$
5$:	CLRA
	STAA	D,STAT+STION1		;REMOVE BY MAKING INACTIVE
	STAA	D,STAT+STION2
6$:	PULA				;NOW, WHERE WERE WE?
	EORA	D,OPEN
	STAA	D,OPEN		;TURN MODS ON IF ANY
60$:	LDAA	E,PANL2		;GAME RESET?
	CMPA	D,SWT2		;HAS A CHANGED OCCUERD HERE?
	BEQ	77$		;IF NO, SKIP
	STAA	D,SWT2		;RECORD CAHNGE
	LSRA			;IN BIT 0
	BCC	61$
	BITA	I,8		;HEAT RESET?
	BNE	77$		;NO
	LDAB	I,1		;YES
	STAB	D,ENDDLY
67$:	RTS
61$:	LDAA	I,40		;PUT BACK IN SELECT MODE
	ORAA	D,GMSTAT
	STAA	D,GMSTAT
	JMP	INIT
70$:	LDX	I,TPCPL+1		;'SELECT GAME'
	STAA	D,SWT1		;HERE, JUST RECORD ANY CHANGE
	LDAB	I,5
	JSR	DSPLY
	LDAB	I,7		;GAME SELECT AREA
71$:	LSRA
	BCC	72$		;PUSHED
	DECB			;NEXT #
	BPL	71$		;0-7?
	LDAA	E,PANL2		;NEXT SWITCH
	LSRA			;NO GAME RESET
	LDAB	I,9.		;GAME 9?
	LSRA
	BCC	72$		;YES
	DECB			;GAME 8?
	LSRA
	BCC	72$
77$:	RTS
72$:
;GAME SELECTED, # IN B
;
	LDAA	D,GMSTAT	;ON?
	BPL	79$		;ALREADY ON
	STAA	E,NOSRST	;RESET POLY COUNTER
	ANDA	I,0BF
	STAA	D,GMSTAT
	BRA	78$
79$:	LDAA	I,80
	STAA	D,GMSTAT
	STAA	E,HTRSTL+1		;TURN ON CONTROL LEDS
	STAA	E,HYPLED+1
	CLRA
	STAA	D,SCORE1
	STAA	D,SCORE0
	LDAA	E,IN18		;READ FREE PLAY AGAIN
	BITA	I,20		;FREE?
	BEQ	78$
;GET TIME AMOUNT ON FREE PLAY
	ANDA	I,07		;GET TIME AMOUNT
	ASLA
	STAA	D,TPTR+1
	LDAA	I,TIMOPT&0FF00/100
	STAA	D,TPTR
	LDX	D,TPTR
	LDAA	X,TIMOPT&0FF
	STAA	D,MINUTES
	STAA	D,MINUTC
	LDAA	X,TIMOPT&0FF+1
	STAA	D,SECONDS
78$:	JSR	INIT
	LDAA	I,15		;WAIT FOR OPTIONS
	STAA	D,DELAY		;MAKE A SOUND
	LDAA	I,0D0
	STAA	E,NOTE
	LDAA	I,0FF		;TURN NOTE OCTAVE ON
	STAA	E,AMPL
80$:	INC	E,MOD		;READY FOR MODS
	STAB	D,TPTR+1
	LDAB	I,MODTBL&0FF00/100
	STAB	D,TPTR
	LDX	D,TPTR
	LDAA	X,MODTBL&0FF	;GAME OPTIONS INITIAL STATE
	STAA	D,OPEN
	LDAA	X,MODTB2&0FF	;OTHER OPTION BYTE
	STAA	D,OPEN2
	LDAA	X,ROTBL&0FF
	STAA	D,ROTS		;ROTATION SPEED
	LDAA	X,ACTBL&0FF	;ACCEL SPEED
	STAA	D,ACCEL
	LDAA	X,BULTBL&0FF
	STAA	D,SPEED
	LDAA	X,TIMTBL&0FF	;BULLET LENGTH DURATION
	STAA	D,TIMES
;SET MAXIMUM VELOCITY OF SHIPS
	LDAA	X,MAXVTBL&0FF	;MAXIMUM SPEED
	STAA	D,MAXV
BYE:	RTS

	.SBTTL	SHELL TIME-OUT ROUTINE
;*****************************************************
;*THIS ROUTINE DECREMENTS THE SHELL TIMER AND CHECKS FOR 0
;* IF A TIMER IS 0, THEN THE STATUS WORD OF THAT SHELL IS
;* SET TO 0. THIS MAKES THE OUTPUT ROUTINE REMOVE THE SHELL
;* FROM THE SCREEN
;*
;*PAGE 0 AFFECT:
;*	COULD ALTER BULLET STATUS WORDS
;*
;*CLOBBERS 'A' AND 'IX'.
;*
;*NO STACK USAGE
;*
;***************************************************
ENDSHL:
	LDX	I,BULT3+1	;8 SHELLS (AND 1 MOBIL OIL ?)
5$:	LDAA	X,STAT
	BEQ	10$		;IF ALREADY 0, LEAVE IT ALONE.
	DECA
	STAA	X,STAT
	ANDA	I,7F		;CHECK TIMER PART
	BNE	10$		;IF NOT 0, ITS STILL GOT LIFE!
	JSR	CLROBJ		;REMOVE OBJECT
10$:	DEX			;NEXT?
	CPX	I,BULT0-1	;ALL CHECKED (GET THE OIL AND WATER)?
	BNE	5$
	RTS

	.SBTTL	FIRE SHELL ROUTINE
;******************************
;*FIRE & START SHELL ROUTINE
;* THIS ROUTINE LOOKS FOR AN INACTIVE
;* BULLET (1 OF 4 BELONGING TO THE PLAYER)
;* IF NONE AVAIBLE, IT RETURNS, NO NET EFFECT
;* IF ONE IS FOUND, THE COMPLETE STATUS INFO
;* OF THE SHIP (HVEL, HPOS, ETC.) ARE STORED
;* TO THE SHELL'S STATUS.
;* ALSO, THE SHELL IS GIVEN AN INITIAL VELOCITY
;* BY CALLING ACELS A NUMBER OF TIMES
;*
;* 'A', 'B', AND 'IX' ARE NOT EFFECTED 
;*
;* PAGE 0 EFFECT:
;*	X1 (2 BYTES), X2 (2 BYTES), X3 (2 BYTES)
;*	(X3 EFFECTED IN SUBSEQUENT CALLED SUBROUTINE)
;*	VARIOUS STATE WORDS OF THE SHELLS
;*
;* STACK SPACE USED: 5 BYTES (USED BY CALLED ROUTINES)
;*		     2 BYTES IF NO SHELL STARTED
;*
;******************************
CKM2:	.BYTE	05E		;CKSUM 6C00-6FFF
FIRE:	PSHA
	PSHB
	STX	D,X1		;SAVE IX (EITHER 1 OR 2)
	LDAA	D,OPEN
	BITA	I,4		;UNLIMITED FUEL?
	BNE	1$
	LDAA	X,SHOT0-1	;ANY SHOTS LEFT?
	BEQ	6$
1$:	CLRB			;TRY COUNTER
5$:	LDAA	X,BULT0+STAT-1	;CHECK STATUS OF BULLET
	BPL	10$		;IF +, WE CAN USE THIS ONE
	INX
	INX
	INCB
	CMPB	I,4		;CHECKED ALL 4?
	BLT	5$		;IF NO, CONTINUE
6$:	BRA 20$			;NONE AVAILABLE, SO RETURN
10$:	STX	D,X2		;WE HAVE AN INACTIVE BULLET
	LDAB	D,X2+1		;ADD OFFSET
	ADDB	I,BULT0		;TO BULLET
	STAB	D,X2+1
	LDAA	D,TIMES		;GET TIME AMOUNT (SET BY OPTIONS)
	STAA	X,BULT0+STAT-1	;SET STATUS
	BSR	STATOBJ
	LDAA	X,OBJH-1	;CENTER
	SUBA	I,2		;STATOBJ GOES + 4, NOW BACK 2
	STAA	X,OBJH-1
	LDAA	X,DIR-1		;START BULET
	PSHA
	JSR	SIN
	STAA	D,J		;V COMPONENT
	PULA
	JSR	COS		;H COMPONENT
	LDAB	D,SPEED		;HOW MUCH?
	BEQ	16$
15$:	ASRA
	ASR	E,J		;LESS
	DECB
	BNE	15$
16$:	ADDA	X,OBJHV-1
	BVC	18$		;OVERFLOW ???? TO MAX
	BPL	17$		;IF -, SHOULD BE + MAX
	LDAA	I,07F
	BRA	18$
17$:	LDAA	I,080		;WAS +, SHOULD BE - MAX
18$:	STAA	X,OBJHV-1
	LDAA	D,J		;NOW VERTICAL
	ADDA	X,OBJVV-1
	BVC	21$		;SEE ABOVE
	BPL	19$
	LDAA	I,07F
	BRA	21$
19$:	LDAA	I,080
21$:	STAA	X,OBJVV-1
	LDAA	I,BULPIC
	STAA	X,DIR-1		;SET BULLET PIC
;
;SHOT SOUND & STEREO VOLUME CONTROL
	LDAA	D,GMSTAT
	BPL	20$
	LDAB	I,0FF
	STAB	D,FIRES
	LDAA	X,OBJH-1	;GET STEREO VOLUME
	TAB
	COMA
	LSRB
	LSRB
	LSRB
	LSRB
	ANDA	I,0F0		;L&R CHANNELS
	ABA
	STAA	E,AMPL
	LDAA	D,OPEN		;UNLIMITED SHOTS?
	BITA	I,4		;IF YES, DONT DEC SHOT COUNT
	BNE	20$
	LDX	D,X1
	DEC	X,SHOT0-1
20$:	LDX	D,X1
	PULB			;DONE
	PULA
	RTS

	.SBTTL	START OBJECT ROUTINE
;**************************************************
;* THIS ROUTINE TAKES MOTION INFO FROM THE OBJECT
;* POINTED TO BY X1 (X1 MUST POINT 1 PAST DESIRED OBJECT)
;* AND STORES IT TO THE OBJECT POINTED TO BY X2 (WHICH
;* ALSO MUST BE ONE PAST DESIRED OBJECT)
;*
;* A, B, & IX ARE CLOBERED
;*
;* PAGE 0:
;*	VARIOUS MOTION WORDS CHANGED
;*
;* STACK SPACE: 6 BYTES
;*
;****************************************************
STATOBJ:
	LDX	D,X1
STAT2:	LDAA	X,OBJHV-1	;GET MOTION INFO ON SHIP
	LDAB	X,OBJVV-1	;THESE ARE VELOCITIES
	PSHA
	PSHB
	LDAA	X,OBJHL-1	;LSB POSITION
	LDAB	X,OBJVL-1
	PSHA
	PSHB
	LDAA	X,OBJH-1	;MSB POSITION
	ADDA	I,4		;MOVE OVER 4
	LDAB	X,OBJV-1
	PSHA
	PSHB
	LDAA	X,DIR-1		;DIRECTION
	LDX	D,X2		;NOW START
	STAA	X,DIR-1
	PULB			;GET MSB POSITION
	PULA
	STAA	X,OBJH-1
	STAB	X,OBJV-1
	PULB			;GET LSB POSITION BACK
	PULA
	STAB	X,OBJVL-1
	STAA	X,OBJHL-1
	PULB
	PULA
	STAB	X,OBJVV-1	;VERTICAL VELOCITY INITIAL
	STAA	X,OBJHV-1	;HORIZ VELOCITY INITIAL
	RTS


	.SBTTL	ROTATE SHIP ROUTINE
;******************************************
;*ROTATE SHIP ROUTINE
;* THIS ROUTINE ROTATES THE SHIP POINTED TO BY
;* IX BY THE AMOUNT PASSED TO IT IN B.
;*
;* NO REGISTERS CHANGED
;*
;* PAGE 0 USED:
;*	POSSIBLE 'DIR' BYTES
;*
;* STACK USED: 2 BYTES
;*
;******************************************
ROTATE:	PSHA
	PSHB
	LDAA	D,OPEN		;UNLIMITED FUEL?
	BITA	I,4
	BNE	2$
	LDAA	X,FUEL0-1
	BEQ	ROUT
2$:	LDAA	D,TIME		;TIME TO DO THIS ROUTINE?
	ANDA	D,ROTS		;CHECK WITH TIME MASK
	BNE	ROUT
	LDAA	X,STAT-1	;DAMAGED?
	ANDA	I,6		;JUST THE NOSE LEFT?
	BEQ	1$
	CMPA	I,6		;EQ IF YES
	BEQ	ROUT		;NOTHING FOR THE NOSE!
	LDAA	D,ROTS
	ASLA
	ORAA	I,1		;MASK NOW 1/2 SPEED
	ANDA	D,TIME
	BNE	ROUT
1$:	LDAA	D,TIME
	ANDA	I,7F
	BNE	10$
	LDAA	D,OPEN
	BITA	I,4		;UNLIMITED DOES NOT SUBTRACT FUEL
	BNE	10$
	DEC	X,FUEL0-1
10$:	LDAA	X,DIR-1		;GET DIRECTION
	ABA			;ADD TURN SPEED
FIXR:	BPL	1$		;IF + , O.K.
	ADDA	I,28.		;IF -, BRING BACK AROUND|
1$:	CMPA	I,28.		;TO BIG?
	BLT	2$		;BACON, LETTUS, AND TOMATO 2$
	SUBA	I,28.		;IF YES,  BRING BACK DOWN
2$:	STAA	X,DIR-1
ROUT:	PULB
	PULA
	RTS


	.SBTTL	REFLECT SHIP OFF WALL ROUTINE
;*************************************************
;*REFLECT SHIP OFF WALL
;*
;*A,B, & IX NOT CHANGED
;*
;*STACK=2 BYTES (LRBOUND), 6 BYTES (VBOUND)
;*
;*************************************************
LRBOUND:PSHA			;HORIZONTAL REFLECT=180-ANGLE
	PSHB
	LDAA	I,0E		;180 DEG.
	SUBA	X,DIR-1
	BRA	FIXR
VBOUND:	PSHA
	PSHB
	BSR	LRBOUND
	LDAA	X,DIR-1
	SUBA	I,0E
	BRA	FIXR
	.NLIST SEQ






























		;THIS PAGE INTENTIONALLY LEFT BLANK





























	.LIST SEQ

	.SBTTL	ACCELERATE SHIPS ROUTINE
;******************************************
;ACCELERATE SPACE SHIPS
;* THIS ROUTINE ACCELERATES THE OBJECT
;* POINTED TO BY 'IX'. (IX MUST POINT TO OBJECT+1)
;*
;* 'A'& 'B' CLOBBERED, 'IX' NOT CHANGED
;*
;* PAGE 0 AFFECT:
;*	POSSIBLE VELOC. BYTES ALTERED
;*	'X3' CLOBBERED BY CALLED ROUTINE
;*	'TPTR' & 'TPTR+1' CLOBBERED BY CALLED ROUTINE
;*	'R0' & 'R1' CLOBBERED
;*
;* STACK USED: 3 BYTES (2 FOR CALLED ROUTINE)
;*
;******************************************
ACELS:	LDAB	X,STAT-1	;NOSE ONLY?
	ANDB	I,6
	CMPB	I,6
	BNE	1$
	RTS
1$:	LDAB	D,TIME
	ANDB	I,0F
	BNE	ACEL2
	LDAB	D,OPEN		;UNLIMITED FUEL?
	BITB	I,4
	BNE	ACEL2
	DECA
	STAA	X,FUEL0-1
ACEL2:	LDAA	X,DIR-1
	PSHA			;SAVE ANGLE
	JSR	SIN		;GET Y ACCELERATION
	STAA	D,J		;SAVE Y ACCELERATION FOR NOW
	PULA
	JSR	COS		;GET X ACCELERATION IN A
	STX	D,X3
	LDAB	D,X3+1
	CMPB	I,2		;SHIP?
	BGT	10$
	LDAB	D,OPEN2		;INSTANT START STOP?
	BMI	30$		;YES
10$:	CLRB			;SIGN EXTEND
	ASLA			;SCALE A
	SBCB	I,0		;IF CARRY, SET -1 (SEX)
	ADDA	X,OBJHVL-1	;ADD TO LSB
	ADCB	X,OBJHV-1		;ADD TO MSB
	BVS	20$
	PSHA
	PSHB
	LDAA	D,X3+1
	CMPA	I,2		;SHIP?
	BGT	12$
	TSTB			;CHECK FOR MAX VELOCITY
	BPL	11$		;NEED + #
	NEGB
11$:	LDAA	X,STAT-1	;DAMAGED?
	BITA	I,6
	BEQ	15$
	ASLB			;TOO FAST
	BVS	12$
15$:	ADDB	D,MAXV		;ADD IN "PUSH OVER" NUMBER (FOR OVERFLOW)
12$:	PULB
	PULA
	BVS	20$		;IF OVERFLOW SKIP
	STAA	D,R0
	STAB	D,R1		;STORE AWAY FOR NOW
	CLRB			;DO Y NOW
	LDAA	D,J
	ASLA		;SEX AND SCALE
	SBCB	I,0		;SEX AGAIN! (NOW OWEN...SHAME)
	ADDA	X,OBJVVL-1
	ADCB	X,OBJVV-1
	BVS	20$
	PSHA
	PSHB
	LDAA	D,X3+1		;SEE ABOVE
	CMPA	I,2
	BGT	14$
	TSTB
	BPL	13$
	NEGB
13$:	LDAA	X,STAT-1	;DAMAGED?
	BITA	I,6
	BEQ	16$
	ASLB			;SLOWER IF DAMAGED
	BVS	14$
16$:	ADDB	D,MAXV
14$:	PULB
	PULA
	BVS	20$		;IF OVERFLOW, SKIP
	STAB	X,OBJVV-1
	STAA	X,OBJVVL-1
	LDAA	D,R0		;GET X BACK & PUT AWAY
	LDAB	D,R1
	STAA	X,OBJHVL-1
	STAB	X,OBJHV-1
20$:	RTS
30$:	LDAB	D,MAXV
;SLOW DOWN DAMAGED SHIP
	PSHB
	LDAB	X,STAT-1	;DAMAGED?
	BITB	I,6
	PULB
	BEQ	31$		;IF NO, OK
	INCB			;YES- SLOW DOWN
31$:	DECB
	BEQ	35$
	ASRA
	ASR	E,J
	BRA	31$
35$:	STAA	X,OBJHV-1
	LDAA	D,J
	STAA	X,OBJVV-1
	RTS

	.SBTTL	EXPLOSION ROUTINE
;*****************************************************
;* EXPLOSION ROUTINE
;* THIS ROUTINE TIMES OUT AND UPDATES EXPLOSION SEQUENCES
;*
;* A, B, & IX ARE CLOBERED
;*
;* PAGE 0:
;*	VARIOUS STATUS WORDS USED, X2 & X1
;*
;* STACK SPACE: 1 BYTE
;*
;********************************************************
EXPOUT:
	LDX	I,EXPP0+1		;2 POSSIBLE EXPLOSION PICS (1 EACH)
5$:	LDAA	X,DIR
	BEQ	11$		;IF 0, NOT ACTIVE
	INCA			;NEXT PIC
	CMPA	I,LASTEXP	;LAST PIC +1?
	BNE	8$
	JSR	CLROBJ		;REMOVE EXPLOSION
;INCREMENT SCORE?
	LDAB	X,STAT-EXPP0	;TOTAL DESTRUCTION?
	BITB	I,40		;IF NO, DO NOTHING
	BEQ	11$
;IF DESTROYED, REMOVE THE SHIP ALSO
	STX	D,X1
	STX	D,X2		;1 TO WORK ON, 1 TO SAVE THE IX
	LDAA	D,X1+1		;POINT TO PROPER SHIP
	SUBA	I,EXPP0
	STAA	D,X1+1
	LDX	D,X1		;GET THE NEW IX
	JSR	CLROBJ
	LDX	D,X2
	LDAB	D,ENDDLY	;READY FOR RESTART. ALREADY FLAGED?
	BNE	11$		;IF NE, ALREADY IN COUNTDOWN FOR NEW HEAT
	LDAB	I,4		;WAIT APPROX 5 SECONDS.
	STAB	D,ENDDLY
	BRA	11$
8$:	STAA	X,DIR
11$:	DEX			;NEXT OBJECT?
	CPX	I,EXPP0-1	;BOTH DONE?
	BNE	5$
	BRA	HYPSPACE

	.SBTTL	HYPERSPACE START ROUTINE
;*************************************************
;*	HYPERSPACE START ROUTINE (PASS STATUS BYTE IN B)
;*
;*	PAGE 0:  SETS 'HYPT#' & CHANGES FUEL
;*
;*	A,B, & IX UNCHANGED
;*
;*	STACK:  2 BYTES
;*
;*************************************************
HYPST:
	PSHA
	PSHB
	LDAA	X,HYPT0-1	;IN?
	BNE	10$		;IF YES, SKIP
	BITB	I,46		;SHIP DAMAGED?
	BNE	10$		;IF YES, NOTHING
	LDAA	D,OPEN		;UNLIMITED?
	BITA	I,4
	BNE	1$
	LDAA	X,FUEL0-1	;CHECK FUEL
	SUBA	I,10		;COST 10 UNITS
	BCS	10$		;IF +, OK.....
	STAA	X,FUEL0-1	;OUT OF FUEL. NO HYPERSPACE, NO COST
1$:	LDAA	I,05		;HYPERSPACE TIME IN
	STAA	X,HYPT0-1
	PULB
	ORAB	I,20		;SET STATUS BIT ON
	PSHB
	CLR	X,OBJHV-1	;STOP
	CLR	X,OBJVV-1
10$:	PULB
	PULA
	RTS
	.SBTTL	HYPERSPACE CONTINUE & END ROUTINE
;
;********************************************************
;*
;*	CONTINUES & ENDS HYPERSPACE
;*
;*	PAGE 0:  VARIOUS POSITIONS & STAT WORDS ALTERED
;*
;*	A,B, & IX CLOBBERED
;*
;*STACK:  2 BYTES
;*
;********************************************************
HYPSPACE:LDX	I,2		;2 SHIPS
5$:	LDAA	X,HYPT0-1	;READ TIME
	BEQ	55$		;IF 0, NOTHING
	DEC	X,HYPT0-1	;0 NOW?
	BNE	50$		;IF NOT NOW 0, NOTHING
;
;HYPER SPACE DONE
;
	JSR	RAND		;MOVE SHIP TO RANDOM PLACE
	STAA	X,OBJV-1
	JSR	RAND
	STAA	X,OBJH-1
	LDAB	X,STAT-1
	ANDB	I,0CF		;CLEAR HYPER HYPER(2 TOOO MUCH MAYBE???) BIT
	STAB	X,STAT-1
50$:	CLR	X,OBJHV-1	;STOP IT MOVING
	CLR	X,OBJVV-1
55$:	DEX
	BNE	5$		;FALL THRU TO RESTART

	.SBTTL	RESTART HEAT ROUTINE
;***************************************************
;* RESTART HEAT ROUTINE
;* THIS ROUTINE LOOKS AT THE BYTE 'ENDDLY'.
;* IF 0, A HEAT IS RUNNING (OR DON'T CARE)
;* IF NOT 0, WERE IN COUNTDOWN TO A NEW HEAT
;* IF JUST 0, START NEW HEAT.
;*
;* A & IX HIT , B UNCHANGED
;*
;* PAGE 0 AFFECT:
;*	IF NEW HEAT STARTED, ALL MOTION AND STAT
;*	INFO IS 0'ED OUT AND SOME REINITIALIZED
;*	MOTION OUTPUTS (43C0, ...) ARE CLEARED.
;*	POLY IS CHANGED
;*
;* STACK SPACE: 5 BYTES (2 FOR CALLING RAND)
;*
;*************************************************
RESTART:
	LDAA	D,ENDDLY	;TIME FOR RESTART?
	BNE	REST2
	JMP	RSE
REST2:	DEC	E,ENDDLY	;COUNTDOWN
	BNE	RSE		;IF NOT 0, DO NOTHING
	LDX	I,TOO		;SET TO TOP OF MOTION OUTPUT SPACE
5$:	CLR	X,0		;MOVE OFF
	DEX
	CPX	I,PICTURE-1	;DO ALL?
	BNE	5$
;CHECK FOR ANY SCORE
	LDAA	D,GMSTAT		;NO SCORE DURING ATTRACT
	BEQ	2$
	LDAA	D,STAT
	ASLA
	BPL	1$		;DESTROYED?
	LDAA	D,SCORE1	;ADD TO OTHER
	ADDA	I,1
	DAA
	STAA	D,SCORE1
1$:	LDAA	D,STAT+1	;2ND SHIP
	ASLA
	BPL	2$
	LDAA	D,SCORE0
	ADDA	I,1
	DAA
	STAA	D,SCORE0
2$:	LDX	I,STAT+10	;CLEAR PAGE 0 ALSO
6$:	CLR	X,0
	DEX
	BNE	6$
	CLR	X,0		;LAST BYTE ALSO
	CLR	X,WRNMK		;WARNING MASK TOO
	LDAA	I,80		;RESTART SHIPS
	STAA	D,STAT
	STAA	D,STAT+1	;STAT'S UP
	LDAA	I,60		;ON RESET, WE TURN GRAV OFF FOR SHIPS...
	ORAA	D,OPEN2		;UNTILL THEY ACCEL. (IF GRAV APPLIES)
	STAA	D,OPEN2
	LDAA	I,LOS+6
	STAA	D,OBJH		;SET HORIZ OF SHIPS TO EDGE OF SCREEN
	LDAA	I,ROS-4
	STAA	D,OBJH+1
7$:	JSR	RAND		;GET RANDOM VERT STARTING POINT
	CMPA	I,15
	BLS	7$
	CMPA	I,0EB
	BHI	7$
	STAA	D,OBJV
8$:	JSR	RAND
	CMPA	I,15		;STAY OFF EDGES
	BLS	8$
	CMPA	I,0EB
	BHI	8$
	STAA	D,OBJV+1
	LDAA	I,0E		;SET DIRECTION OF RIGHT SHIP LEFT
	STAA	D,DIR+1		;(THE OTHER SHIP COMES UP CORRECT)
	LDAA	I,18.
	STAA	D,SHOT0
	STAA	D,SHOT1
	LDAA	I,63		;START FUEL
	STAA	D,FUEL0
	STAA	D,FUEL1
	JSR	SPSTN
	LDAA	I,10
	STAA	D,HEATT
	LDAA	I,3
	STAA	D,ROCKD		;NEW ROCK DELAY START
RSE:	JMP	SCROUT

	.SBTTL	CLEAR OBJECT ROUTINE
;************************************************
;* THIS ROUTINE CLEARS AN OBJECT POINTED TO BY IX
;*
;* NO REGISTERS AFFECTED
;*
;* PAGE 0:
;*	MOTION WORDS POINTED TO ARE CLEARED
;*
;* STACK SPACE: 1 BYTE
;*
;**************************************************
CKM3:	.BYTE	69		;CKSUM 7000-73FF
CLROBJ:
	PSHA
	LDAA	X,STAT
	ANDA	I,40		;ALL BUT DESTROYED BIT
	STAA	X,STAT
	PULA
	CLR	X,OBJH
	CLR	X,OBJV
	CLR	X,OBJHV
	CLR	X,OBJVV
	RTS

	.SBTTL	MESSAGE ROUTINE
;*************************
;* MESSAGE WRITE ROUTINE (DOES LANGUAGE CONVERSION)
;*  PASS MSSAGE # IN B, OUTPUT LOCATION IN IX 
;* A&B UNCHANGED, IX CHANGED
;*
;* PAGE0: X1, TPTR (2BYTES),X2,R0
;*
;*
;* STACK: 2 BYTES
;*
;*************************
DSPLY:	STX	D,X1		;HOLD OUTPUT LOCATION
	PSHA			;SAVE A
	PSHB			;SAVE B
	STAA	E,WTDOG
	ASLB
	ASLB			;MESSAGE # TIMES 8
	ASLB
	ADDB	D,LANG		;ADD LANUGAGE
	STAB	D,TPTR+1
	LDAB	I,MESTBL&0FF00/100	;TABLE ADDRESS MSB
	STAB	D,TPTR
	LDX	D,TPTR		;GET MESSAGE INDEX POINTER
	LDX	X,MESTBL&0FF	;GET MESSAGE ADDRESS
	STX	D,X2		;SAVE MESSAGE
5$:	LDAB	I,-1		;REPEAT COUNT IS -1 DEFAULT
	LDX	D,X2
10$:	LDAA	X,0		;NEXT INPUT
	BEQ	40$		;0 IS END OF MESSAGE
	BPL	20$		;IF +, A CHARACTER
	TAB			;ITS -, SO ITS REPEAT COUNT
	LDAA	X,1		;GET REPEAT CHARACTER
20$:	INX
	STX	D,X2		;SAVE INPUT POINTER
	LDX	D,X1		;OUTPUT LOCATION
25$:	ANDA	I,1F
	STAA	X,0
	INX
	INCB
	BMI	25$
	STX	D,X1		;SAVE OUTPUT POINTER
	BRA	5$
40$:	PULB
	PULA
	RTS
;MESSAGE TABLE 0=ENGLISH,1=FRENCH,2=SPANISH,3=GERMAN
MESTBL:
	.WORD	MES0E		;'LOW' (ENGLISH)
	.WORD	MES0F		;(FRENCH)
	.WORD	MES0S		;(SPANISH)
	.WORD	MES0G		;(GERMAN)
	.WORD	MES1E		;'PER COIN'
	.WORD	MES1F		;(F)
	.WORD	MES1S		;(S)
	.WORD	MES1G		;(G)
	.WORD	MES2E		;FREE PLAY
	.WORD	MES2F	
	.WORD	MES2S
	.WORD	MES2G
	.WORD	MES3E		;'OUT'
	.WORD	MES3F
	.WORD	MES3S
	.WORD	MES3G
	.WORD	MES4E		;'GAME OVER'
	.WORD	MES4F
	.WORD	MES4S
	.WORD	MES4G
	.WORD	MES5E		;SELECT GAME
	.WORD	MES5F
	.WORD	MES5S
	.WORD	MES5G
	.WORD	MES6E
	.WORD	MES6F
	.WORD	MES6S
	.WORD	MES6G
;LOW (USED FOR LOW FUEL & LOW SHELLS)
MES0E:	.ASCIZ	/LOW/
MES0F:
MES0S:
MES3F:				;SAME FOR OUT AS LOW (SEE OUT BELOW)
MES3S:
MES3G:
MES0G:	.BYTE	-3,40,0		;BLAKN FOR ALL BUT ENGLISH
MES1E:	.ASCIZ	/PER@COIN/
MES1F:	.ASCIZ	/PAR@PIECE/
MES1S:	.ASCIZ	/POR@FICHA/
MES1G:	.ASCIZ	/PRO@MUENZE/
MES2E:
	.ASCIZ	/@@FREE@PLAY/
MES2F:	.ASCIZ	/PARTIE@GRATUITE/
MES2S:	.ASCIZ	/@@JUEGO@GRATIS/
MES2G:	.BYTE	-3,40
	.ASCIZ	/FREISPIEL/
MES3E:	.ASCIZ	/OUT/
MES4E:	.BYTE	-2,40		;2 BALNKS FIRST
	 .ASCIZ	/GAME@OVER/	;GAME OVER
MES4F:	.ASCIZ	/@FIN@DE@PARTIE/
MES4S:	.ASCIZ	/JUEGO@TERMINADO/
MES4G:	.BYTE	-2,40		;2 BLANKS FIRST
	.ASCIZ	/SPIELENDE/
MES5E:	.ASCIZ	/SELECT@GAME/	;SELECT GAME
MES5F:	.ASCIZ	/CHOIX@DU@JEU/
MES5S:	.ASCIZ	/@ELEGIR@JUEGO/
MES5G:	.BYTE	-2,40
	.ASCIZ	/SPIELWAHL/
MES6E:	.BYTE	-3,40		;4 BLANKS
	.ASCIZ /INSERT@COINS/
MES6F:	.ASCIZ	/INTRODUIRE@LES@PIECES/
MES6S:	.BYTE	-3,40		;MOVE UP 3 SPACES (MOTHER MAY I?)
	.ASCIZ	/INSERTE@FICHAS/
MES6G:	.BYTE	-3,40		;MOVE 3 SPACES
	.ASCIZ	/GELD@AUSWERFEN/

	.SBTTL	WHITE NOISE ROUTINE
;************************************************************
;* EXPLOSION ROUTINE & SHIP THRUST SOUND CONTROL
;*
;*A, B & IX CHANGED
;*
;*PAGE 0: SNDLL & SNDRR UPDATED, FLAG CHANGED
;*
;*STACK: 0 BYTES
;*
;***********************************************************
BOOM:	CLRA
	CLRB
	TST	E,GMSTAT
	BPL	37$
	LDAA	D,TIME		;TIME FOR EXPLOSION CHANGE?
	ANDA	I,0F
	BNE	21$		;NO
	LDAA	D,SNDLR		;YES
	BEQ	10$		;EXPLOSION FADE
	DECA
10$:	LDAB	D,SNDLL
	BEQ	20$
	SUBB	I,10
20$:	STAB	D,SNDLL		;NO ADD THRUST SOUND IF ANY
	STAA 	D,SNDLR
21$:	CLRA			;PUT NO SOUNDS IN TEMP CELLS
	STAA	D,R0
	STAA	D,R1
	LDX 	I,2		;BUT FIRST CHECK IF TOO LOAD 
22$:	LDAB	X,STAT-1	;IT THIS SHIP TRUSTING?
	BITB	I,40		;DESTROYED?
	BNE	30$
	LDAA	X,FUEL0-1
	BEQ	30$		;NO SOUND IF OUT OF FUEL
	LSRB			;?
	BCC	30$
				;DO OTHER SHIP
	LDAA	X,OBJH-1	;NOW ADD IN THRUST (IF ON)
	TAB
	COMB
	LSRA
	LSRA
	LSRA
	LSRA
	LSRA			;THRUST FOR RIGHT (0-7)
	ORAA	D,R0
	STAA	D,R0
	LSRB			;LEFT CHANNEL (00-70)
	ANDB	I,0F0
	ORAB	D,R1
	STAB	D,R1
30$:	DEX
	BNE 	22$		;NEXT SHIP
	LDAA	D,SNDLR		;NO ITS ADD IN TIME, BUT....
	CMPA	I,7		;...IF EXPLOSION IS LOADER THAN THRUST
	BGE	35$		;DON'T OR IN THRUST
	ORAA	D,R0
35$:	LDAB	D,SNDLL		;DO SAME WITH LEFT
	CMPB	I,60		;>60?
	BHI	37$
	ORAB	D,R1
37$:	ABA			;MIX CHANNELS
	STAA	E,NOISE


	.SBTTL	BLINK STARS ROUTINE
;***************************************************
;* TAKES STAR POINTED TO (THROUGH TABLE) BY 'STRBLK'
;* AND TURNS IT OFF FOR A SHORT TIME. IT IS THEN TURNED
;* BACK ON AND POINTED TO THE NEXT ENTRY
;*
;* A, B, & IX CHANGED
;*
;* PAGE 0: STRBLK COULD CHANGE
;*
;* STACK: 0 BYTES
;*
;***************************************************
BLINK:
	LDAA	D,OPEN
	BITA	I,2
	BEQ	25$		;STARS ARE OFF
	LDX	D,STRBLK	;POINTER INTO TABLE
	LDAB	I,STARPC	;STAR PIC
	LDAA	D,TIME		;NOW?
	ANDA	I,03		;EVERY 3 FRAMES
	BNE	10$		;NOT TIME FOR NEXT
	INX
	INX			;NEXT BLINKER
	CPX	I,STBLE		;PAST END OF TABLE?
	BNE	10$
	LDX	I,STRTBL	;RESET TO START
10$:	STX	D,STRBLK	;SAVE NEW POINTER
	LDAA	D,TIME
	ANDA	I,2		;OFF 2 OUT OF 3
	BNE	20$
	CLRB			;CLEAR TIME
20$:	LDX	X,0		;GET SCREEN ADDR OUT OF TABLE
	STAB	X,0
	RTS
25$:


	.SBTTL	STATUS OUTPUT
;*************************
;* OUTPUT SHIPS STATUS
;*
;*
;* A,B & IX CLOBERED
;*
;* PAGE0: FLAG
;*
;* STACK:
;*
;**************************
SCROUT:	LDAA	I,LITTLE	;SMALL NUMBERS
	STAA	D,FLAG
	LDAA	D,GMSTAT	;GAME STATUS
	BMI	10$		;GAME ON
	BNE	2$		;GAME IN FREEZE
1$:	RTS			;NOTHING
2$:	LDAA	I,30
	STAA	D,FLAG		;SCORE IS LARGE
	LDAA	D,SCORE1	;OUTPUT SCORE
	LDX	I,SCPL1-20
	JSR	CONVT2		;OUTPUT 1
	LDAA	D,SCORE0
	LDX	I,SCPL0-20
	JMP	CONVT2		;OUTPUT 2 & END
10$:	LDAA	D,OPEN		;UNLIMITED FUEL?
	BITA	I,4
	BNE	2$		;IF YES, SCORE
	LDAA	D,HEATT		;HOW FAR INTO HEAT
	BNE	2$		;STILL SCORE OUTPUT TIME
	LDX	I,SCPL0		;TIME FOR STATUS OUTPUT FIRST FUEL
	LDAA	D,FUEL0
	LDAB	I,1		;IF LOW(WE DON'T KNOW YET) THIS IS BIT FOR WARNING MASK
	STAB	D,R0
	JSR	BTDCVT
	TBA			;LOW LEVEL IS 20 FOR FUEL
	BSR	NUMOT
	LDX	I,SCPL0-20	;GET OUTPUT LOCATION
	LDAA	D,SHOT0		;GET SHOTS
	LDAB	I,2		;IF LOW (WE DON'T KNOW YET) THIS IS BIT FOR WARNING MASK
	STAB	D,R0
	JSR	BTDCVT
	TBA
	CMPB	I,5		;LOW FOR SHOTS IS 5
	BSR	NUMOT2
	LDX	I,SCPL1		;SAME AS ABOVE, BUT NOW FOR SHIP 1
	LDAA	D,FUEL1
	LDAB	I,4
	STAB	D,R0
	JSR	BTDCVT
	TBA
	BSR	NUMOT
	LDX	I,SCPL1-20
	LDAA	D,SHOT1
	LDAB	I,8
	STAB	D,R0
	JSR	BTDCVT
	TBA
	CMPB	I,5
	BRA	NUMOT2
NUMOT:	CMPB	I,20		;LOW
NUMOT2:	BHI	10$		;OK TO OUTPUT
	PSHB
	LDAB	D,R0		;ALREADY?
	BITB	D,WRNMK		;CHECK FOR ALREADY WARNED
	BNE	1$
	ORAB	D,WRNMK		;IF NOT, SET MASK TO YES
	STAB	D,WRNMK
	LDAB	I,07
	STAB	D,WARN		;START WARNING
1$:	LDAB	D,TIME
	BITB	I,10		;FLASH 'LOW'
	PULB			;OUTPUT 'LOW'
	BNE	10$
	TSTB			;'OUT?'
	BNE	2$
4$:	LDAB	I,3
	BRA	3$
2$:	CLRB
3$:	JMP	DSPLY		;& RETURN
10$:	CLRB
	STAB	X,2		;REMOVE LAST LETTER JUST IN CASE


	.SBTTL	ASCII OUTPUT ROUTINE
;********************************************************
;*
;*	DISPLAYS A&B IN ASCII AT LOC POINTED TO BY IX
;*	0 BLANKS
;*
;*	PAGE 0:  FLAG
;*
;*	CLOBBERS A & IX
;*
;*	STACK:  4 BYTES
;*
;********************************************************
CONVT:
	PSHB			;SAVE THIS MESS
	LDAB	D,FLAG		;BLANK
	BNE	1$
	STAB	X,0
	BRA	15$
1$:	TAB
	LSRA
	LSRA			;HIGH NIB TO LOW A
	LSRA
	LSRA
	BEQ	10$
	PSHA
	PULA
10$:	ADDA	D,FLAG
	STAA	X,0
15$:	INX
	ANDB	I,0F		;THE OTHER HALF
	BEQ	20$
	PSHB
	PULB
20$:	ADDB	D,FLAG
	STAB	X,0
	INX
	PULB
	RTS
CONVT2:	CLR	X,0		;CLEAR OLD WRONG
	CLR	X,20
	CLR	X,1
	CLR	X,21
	CLR	X,2
	CLR	X,22
	BRA	CONVT

	.SBTTL	CLEAR SCREEN ROUTINE
;***********************************************************
;* CLEARS PLAY FIELD RAM
;*
;* A & B UNCHANGED, IX CHANGED
;*
;* PAGE 0: NONE
;*
;* STACK: 0 BYTES
;*
;************************************************************
CLRS:
	LDX	I,PLAYF
1$:	CLR	X,0
	INX
	CPX	I,PLAYF+400
	BNE	1$
	INC	E,CHANGE
	RTS


	.SBTTL MATH PACKAGE
	.SBTTL	RANDOM NUMBER ROUTINE
;****************************************************
;* RANDOM NUMBER ROUTINE (RANDOM????)
;* YEP ITS JUST A POLY COUNTER WHICH IS CALLED
;* BY NMI (TO KEEP IT MOVING)
;*
;* A IS THE ONLY GUY AFFECTED
;*
;* PAGE 0:
;*	A&B CHANGED, IX IS NOT
;*
;* STACK SPACE: 0 BYTES
;*
;******************************************************
RAND:
	LDAA	D,POLY
	BEQ	2$			;0 IS LOCKUP
	BITA	I,4
	BEQ	1$
	EORA	I,40
1$:	ASLA
	BPL	3$
2$:	INCA
3$:	STAA	D,POLY
	RTS
;*********************************************************
;*
;* RANDOM (???) NUMBER ROUTINE WHICH ALWAYS RETURNS
;* A NUMBER + TO - '1F'
;*
;* A CHANGED, B & IX NOT CHANGE
;*
;* PAGE 0: POLY CHANGED
;*
;* STACK: 2 BYTES
;*
;***********************************************************
RAND2:
	BSR	RAND
	BPL	1$
	NEGA			;IF -, MAKE + FOR A BIT
	ANDA	I,1F
	NEGA
	RTS
1$:	ANDA	I,1F
	RTS

	.SBTTL	SIN & COS ROUTINE
;*************************************************************
;* THIS TAKES AN ANGLE IN A (0-27.), AND RETURNS
;* SIN OR COS IN A.
;* ANGLE COMPUTED ON  A * 12.86 DEGS.
;*
;* A & B CLOBERED, IX  UNCHANGED
;*
;* PAGE 0 USED:
;*	TPTR (2 BYTES), X3 (2 BYTES)
;*
;* STACK USED: 0 BYTES
;*
;***************************************************
SIN:	NEGA			;-ALPHA
	ADDA	I,7		;PI/2 - ALPHA
	BPL	COS
	ADDA	I,28.		;IF TOO SMALL (MOD 28)
COS:	STAA	D,TPTR+1	;LOOK UP #
	LDAA	I,TBL2&0FF00/100
	STAA	D,TPTR
	STX	D,X3
	LDX	D,TPTR
	LDAA	X,TBL2&0FF
	LDX	D,X3
	RTS


	.SBTTL	DIVIDE (BY 32 ONLY)
;*****************************************************
;DIVIDE B BY 32, RESULT IN A (HI) & B (LO)
;*
;* A & B CLOBERED, IX UNCHANGED
;*
;* PAGE 0 USED:
;*	NONE
;*
;* STACK SPACE: 0 BYTES
;*
;***************************************************
DIV32:	CLRA
	ASLB
	BCC	1$
	COMA			;SIGN EXTEND
1$:	ASLB
	ROLA
	ASLB
	ROLA
	RTS


	.SBTTL	BINARY TO DECIMAL CONVERT
;*********************************************
;*
;*	CONVERT BINARY IN A TO DECIMAL IN A&B (A=MSB, B=LSB)
;*
;*	PAGE 0:  NONE
;*
;*	A&B CHANGED, IX IS NOT
;*
;*	STACK:  1 BYTE
;*
;*********************************************
BTDCVT:
	LDAB	I,-1		;CONVERT
1$:	INCB
	SUBA	I,100.
	BCC	1$		;'BLO' AFTER SUBA CARRY=BORROW
	ADDA	I,100.		;RESTORATIVE DIVISION, WORK ON IT****
	PSHB
	LDAB	I,0F0		;START 1 OFF
2$:	ADDB	I,10		;10 HEX
	SUBA	I,10.
	BCC	2$
	ADDA	I,10.		;RESTORATIVE
	ABA
	TAB			;1'S LEFT OVER
	PULA			;100'S
	RTS

	.SBTTL MOTION ROUTINE
	.SBTTL	INITIALIZATION ROUTINE
;*************************************
;* CLEAR SCREEN, CLEAR MOTION OBJECTS, INIT OPTION PRAMS.
;*
;* A & IX HIT, B UNCHANGED
;*
;* PAGE 0 USED:
;*	IF THERE WAS SOMETHING THERE, ITS NOT THERE NOW!!!!
;*	(WILL NOT CLEAR SECOND, MINUTE OR SCORES)
;*
;* STACK SPACE: 0 BYTES
;*
;*************************************
INIT:	LDX	I,PLAYF		;CLEAR SCREEN THRU...
1$:	CLR	X,0
	INX
	CPX	I,TOO+1		;....TOP OF MOTION OBJECTS.....OH..KEY..DOKEE...
	BNE	1$
	LDX	I,WARN		;CLEAR PAGE 0
;..... WELL, AT LEAST MOST OF IT........
;		THIS COMMENT INTENTIONALLY LEFT BLANK
2$:	CLR	X,0
	DEX
	BNE	2$
	CLR	X,0
	LDAA	I,HSTBL&0FF00/100	;SET UP FOR IRQ INTERRUPTS
	STAA	D,TIX2
	INC	E,CHANGE	;ALLOW CLOCK OUT (IF NECESSARY)
	CLR	E,NOISE		;SOUNDS OFF
	LDAA	I,01
	STAA	D,ENDDLY	;SET UP FOR RESTART
	LDAA	I,15
	STAA	D,DELAY		;SOUND OUT
	STAA	D,ATRACT	;ATTRACT TIMER
	LDAA	D,OPEN
	BITA	I,2		;STARS OFF
	BNE	OUTI
;
;OUTPUT STARS ROUTINE (PART OF INIT)
; A & IX CLOBBERED
;PAGE 0 NOT CLOBBERED IF ENTERED HERE; ONLY STRBLK RESET
;NO STACK USED
;
STARS:	LDX	I,STRTBL
	STX	D,STRBLK
	LDAA	I,STARPC	;STAR PIC
	LDX	I,STRTBL-2	;STAR TABLE-2
3$:	INX			;+2
	INX
	STX	D,X1
	LDX	X,0		;NEXT OUTPUT LOCATION
	BEQ	OUTI
	STAA	X,0
	LDX	D,X1
	BRA	3$		;NEXT
OUTI:	RTS

	.SBTTL	KEEPUP ROUTINE
;********************************************************
;*
;*THIS ROUTINE MOVES BOTH HALVES OF THE SPACE SHIP TOGETHER
;*
;*PAGE 0:  UPDATES POSITIONS OF UPPER OBJECTS. X1&X2 CLOBBERED
;*
;*STACK:  2 BYTES ON CALL (6 BYTES IN CALLED)=8 BYTES
;*
;********************************************************
KEEPUP:
	LDAA	D,STAT
	STAA	D,STAT+2
	LDAA	D,STAT+1
	STAA	D,STAT+3
	LDX	I,4.		;SHIP 1 SET UP
	STX	D,X2
	LDX	I,2		;SET OBJECT 4 TO OBJECT 1
	JSR	STAT2
	DEX
	STX	D,X2		;NOW DO SHIP 0
	LDX	I,1		;SET OBJECT 3 TO OBJECT 0
	JMP	STAT2

	.SBTTL	SPACE STATION ROUTINES
;******************************************
;* START SPACE STATIONS
;*
;*PAGE 0: VARIOUS STATUS & MOTION BYTES CHANGED
;*
;*STACK: 0 BYTES
;*
;******************************************
CKM4:	.BYTE 0D		;CKSUM 7400-77FF
SPSTN:	LDAA	D,OPEN
	BITA	I,8		;ON?
	BNE	SPSTN2
	RTS
SPSTN2:	LDAA	I,80		;ACTIVE BITS
	STAA	D,STAT+STION1
	STAA	D,STAT+STION2
	LDAA	I,STNPIC
	LDAB	E,PANL2		;READ OPTIONS (SCREEN REFLECT) 
	BITB	I,08		;FLIP OBJECTS?
	BEQ	1$
	ORAA	I,80		;FLIP OBJECTS
1$:	STAA	D,DIR+STION1	;PICTURES
	INCA
	STAA	D,DIR+STION2
	LDAA	I,80		;SET H AND V POSITION 0F OBJECTS
	LDAB	I,4E
	STAA	D,OBJH+STION1
	STAB	D,OBJV+STION1
	LDAB	I,0B2		;OTHER OBJECT NOW
	STAA	D,OBJH+STION2
	STAB	D,OBJV+STION2
	LDAA	I,1A		;VELOCITY OF BOTH OBJECTS
	STAA	D,OBJHV+STION1
	CLRA
	STAA	D,OBJVVL+STION1	;LSB BYTES ALSO
	STAA	D,OBJHVL+STION1
	STAA	D,OBJHL+STION1
	STAA	D,OBJVL+STION1
	STAA	D,OBJVV+STION1	;CLEAR VERT VELOCTIY
;***********************************************
;*ORBIT ROUTINE TO MOVE SPACE STATINS
;*
;*PAGE 0: VARIOUS STATUS & MOTION BYTES CHANGED
;*	 FLAG CHANGED IF STATIONS ON
;*
;*STACK: 0 BYTES
;***********************************************
ORBIT:	CLR	E,FLAG
	LDAA	D,OPEN		;STATIONS OUT?
	BITA	I,8
	BEQ	10$		;IF OFF, WE CAN DO A SPACE ROCK
	LDAA	I,80		;THE SECOND SHIP STAYS ALWAYS
	TAB			;180 DEG ABOUT THE SUN
	SUBA	D,OBJH+STION1	;DISTANCE FROM SUN
	ADDA	I,80		;TO OTHER SIDE
	STAA	D,OBJH+STION2
	CMPA	I,81		;ON HORIZ RESTART  POINT?
	BNE	1$		;YES
	STAA	D,FLAG		;SET FLAG TO CHECK NEXT
1$:	SUBB	D,OBJV+STION1	;NOW VERT.
	ADDB	I,80
	STAB	D,OBJV+STION2
	LDAA	D,FLAG
	BEQ	GRAV
	TSTB
	BMI	SPSTN2		;STATION AT START POINT
	BRA	GRAV
10$:
;
;STATIONS OFF SO WE CAN USE THE MOTION OBJECT AS A SPACE ROCK
;
	LDAA	D,STAT+STION1		;IS ROCK BLOWING UP?
	BPL	20$			;NOT ACTIVE?
	BITA	I,2	
	BNE	30$			;YES
17$:	LDAA	D,ROCKD			;READY TO START
	BNE	21$			;NO
	LDAA	D,OBJH+STION1		;WATCH FOR EDGE HIT
	BPL	11$
	NEGA
11$:	ANDA	I,0F8
	BEQ	18$			;H AT EDGE?
	LDAA	D,OBJV+STION1		;HOW ABOUT V?
	BNE	35$
18$:	LDAB	I,3
	STAB	D,ROCKD
	STAA	D,STAT+STION1		;TURN OFF
20$:	LDAA	D,TIME			;TIME FOR NEW ROCK?
	BNE	35$			;CHECK ONCE EVERY 256 FRAMES
	LDAA	D,ROCKD			;ONCE EVERY 5 TIMES IN, START ONE
21$:	DECA
	STAA	D,ROCKD	
	BPL	35$
	LDAA	I,40			;DELAY TO ALLOW CLEAR AT EDGE
	STAA	D,ROCKD			;TIME FOR NEW ONE
	LDAA	I,80
	STAA	D,STAT+STION1		;STATUS ACTIVE
	LDAA	I,ROCK
	STAA	D,DIR+STION1		;PIC TO ROCK
	JSR 	RAND2
	STAA	D,OBJVV+STION1		;RANDOM VELOCITIES
	JSR	RAND2
	STAA	D,OBJHV+STION1
;
;CLEAR ONE SIDE TO EDGE
;
	CLRB
	JSR	RAND
	BITA	I,40
	BNE	28$
	STAB	D,OBJV+STION1
	BRA	35$
28$:	STAB	D,OBJH+STION1
29$:	BRA	35$
30$:	LDAA	D,TIME			;ROCK IS BLOWING UP
	ANDA	I,0F
	BNE	17$			;BLOW UP SPEED
	LDAA	D,DIR+STION1		;WHAT PIC IN SEQUENCE
	INCA
	STAA	D,DIR+STION1
	CMPA	I,LEXPRK+1		;LAST IN SEQUENCE
	BNE	17$			;IF NO, OK
	CLRA
	STAA	D,STAT+STION1		;TURN OFF
35$:

	.SBTTL	GRAVITY ACCELERATION ROUTINE
;***********************************************************
;*
;*GRAVITY ROUTINE
;*	ADDS GRAVITY TO OBJECTS
;*	USES A 256 BYTES TABLE WHICH IS
;*	ENTERED FIRST WITH (X,Y) FOR X
;*	ACCEL, THEN (Y,X) FOR Y ACCEL.
;*	NOTE: IX POINTS +1 FROM OBJECT NUMBER
;*
;*
;*A,B, & IX CHANGED
;*
;*PAGE 0: X1,TPTR & FLAG
;*	      VARIOUS MOTION BYTES
;*
;*STACK: 2 BYTES
;*
;***********************************************************
GRAV:	STAA	E,WTDOG
	LDX	I,15.		;DO TOP 15 OBJECTS
	LDAA	I,GRV1		;SET UP TABLE LOOKUP
	STAA	D,TPTR
;
;ACTUALLY 13, BUT #16 ALWAYS FOLLOWS #15 SO NO NEED TO TOUCH IT
;AND OBJECTS 4&3 ARE SKIPED (THEY FOLLOW 1 & 2)
;
1$:	STX	D,X1		;SAVE IX FOR READING OBJ #
	LDAB	D,X1+1
	CMPB	I,STION1+1	;ALWAYS MOVE STATIONS
	BEQ	2$		;ELSE....
	CMPB	I,SHIPHF+2		;SHIP HALF?
	BNE	4$		;IF NO, DO IT
	DEX		;IF YES, SKIP BOTH (YEP!)
	DEX
	BRA	1$
;
;IN GRAVITY GAMES, GRAVITY DOES NOT AFFECT THE SHIP
;UNTILL SOME ACCEL. HAS OCCURED. THE FOLLOWING BITS
;INDICATE THAT
;
4$:	LDAA	I,40		;GUESS SHIP 0
	DECB
	BEQ	8$
	LDAA	I,20
	DECB			;IS IT SHIP 1
	BNE	9$		;NOT SHIP 1 EITHER
8$:	BITA	D,OPEN2		;IS THE NO GRAV BIT LIT UP?
	BNE	5$		;IF YES, NO GRAV FOR THIS GUY
9$:	LDAA	D,OPEN		;TIME FOR OTHERS
	BITA	I,20		;NO GRAV?
	BNE	6$		;NO
	LSRA			;STRONG?
	BCS	2$		;YES
	LDAA	D,TIME		;NO, CHECK TIME
	ANDA	I,03
	BNE	6$		;NOT TIME
2$:	LDAA	X,STAT-1	;ACTIVE?
	BMI	10$
5$:	DEX			;CHECK NEXT OBJECT
	BNE	1$
6$:	JMP	BOOM		;DO WHITE NOSE NOW
10$:	CLRB
	LDAA	X,OBJH-1	;H POSITION
	SUBA	I,80		;NORMAL TO SCREEN CENTER
	BCC	12$
	NEGA			;!A!
	INCB			;QUAD #
12$:	ASLB			;TO SECOND BIT
	LSRA			;USE TOP SIGNIFICANT BITS
	LSRA
	LSRA
	STAA	D,FLAG
	LDAA	X,OBJV-1	;GET VERT NOW
	SUBA	I,80		;NORMAL V
	BCC	14$
	NEGA			;!A!
	INCB			;QUAD # (0=I, 1=IV, 2=II, 3=III)
14$:	ASLA
	ANDA	I,0F0		;PUT SIGNIFICANT BITS INTO TOP 4
	ORAA	D,FLAG		;GET OTHERS BACK
	STAA	D,TPTR+1
	STX	D,X1
	LDX	D,TPTR		;GET GRAV # POINTER
;MOVE SPACE STATIONS
	LDAA	D,OPEN
	BITA	I,8		;STATIONS SELECTED?
	BEQ	3$		;IF NO, THE ROCK FOLLOWS NORMAL GRAV (IF ANY)
	LDAA	D,X1+1		;GRAVITY ALWAYS FOR SPACE STATIONS
	CMPA	I,STION1+1	;SPACE STATIONS ARE 15 &14
	BGE	16$		;ALWAYS POSITIVE
3$:	LDAA	D,OPEN
	BITA	I,40		;NEG GRAV?
	BEQ	16$
13$:	COMB			;YES
16$:	STAB	D,FLAG
	LDAB	X,GRV2		;GET Y ACCEL
	LSR	E,FLAG
	BCS	15$		;???
	NEGB
15$:	JSR	DIV32		;B/32 --> A&B
	LDX	D,X1
	ADDB	X,OBJVVL-1
	ADCA	X,OBJVV-1
	BVC	20$		;NO OVERFLOW, OK
	ASLA			;GET PERVERTED SIGN INTO CARRY
	LDAA	I,7F		;ASSUME WAS POSITIVE, SET 7FFF
	LDAB	I,0FF
	BCS	20$		;BRANCH IF WAS POSITIVE
	COMA			;ELSE WAS NEG, SET 8000
	COMB
20$:	STAB	X,OBJVVL-1
	STAA	X,OBJVV-1
;NOW SWAP NIBBLES, GET X
	LDAA	D,TPTR+1	;SWAP!!!
	TAB
	ANDB	I,0F0		;CLR BOTTOM B
	ABA			;SHIFT TOP UP 1
	ROLA
	ROLA
	ROLA
	ROLA
	STAA	D,TPTR+1
	LDX	D,TPTR
	LDAB	X,GRV2
	LDX	D,X1
	LSR	E,FLAG
	BCS	27$		;???
	NEGB
27$:	JSR	DIV32
	ADDB	X,OBJHVL-1
	ADCA	X,OBJHV-1
	BVC	30$
	ASLA
	LDAA	I,7F		;OVERFLOW CHECK AS ABOVE
	LDAB	I,0FF
	BCS	30$
	COMA
	COMB
30$:	STAB	X,OBJHVL-1
	STAA	X,OBJHV-1
	JMP	5$		;NEXT
	

	.SBTTL	MOVE ROUTINE
;**********************************************
;MOTION ROUTINE, WALL CHECK, COLLISION DETECT
;*
;* MOVES ALL BUT ALT TWO SHIP HALFS
;* OBJECTS 2 & 3 ARE MOVED BY
;*'KEEPUP' ROUTINE. AFTER EACH OBJECT IS MOVED,
;*IT IS CHECKED FOR A COLLISION WITH THE SUN OR
;*EITHER SHIP.
;*
;*EVERYBODY (A,B & IX) CHANGED
;*
;*PAGE 0:  MOTION BYTES CHANGED
;*	   TPTR (2 BYTES),TSTVV,TSTVVL,TSTHV,TSTHVL
;*	   FLAG,X1,X2
;*	   AND ANY LISTED BELOW IN COLLISION LIST
;*
;*STACK (WORST CASE):  9 BYTES (INCLUDES COLLISION)
;*
;**********************************************
MOTION:	LDX	I,15.		;
;
;OBJECTS 2 & 3 (ALT SHIP HALF ) DONT MOVE
;
MOVE:	STX	D,X2
	LDAB	D,X2+1			;OBJECT NUMBER
	CMPB	I,3
	BNE	1$
	DEX
	DEX		;SKIP BOH SHIP HALFS
	BRA	MOVE
1$:	LDAA	X,STAT		;SKIP IF NOT ACTIVE
	BMI	MANDD
MUNXT:	DEX
	CPX	I,0FFFF
	BNE	MOVE
	JMP	KEEPUP		;IF OBJECT IS NOT MOVING, RETURN
;TEMP TO ALWAY BOUNCE SPACE STATIONS
MANDD:	CMPB	I,STION1	;IS THIS A ROCK OR STATION?
	BGT	WALCKE
	LDAA	D,OPEN		;WRAP OR BOUNCE?
	BPL	WALCKE		;IF -, WRAP
1$:	LDAA	X,OBJV
	CMPA	I,BOS		;BOTTOM LINE
	BCS	IVRTA		;BRANCH IF BELOW
	CMPA	I,TOS		;TOP LINE
	BCC	IVRTA		;BRANCH IF ABOVE
	LDAA	X,OBJH
	CMPA	I,LOS		;RIGHT SIDE
	BCS	IVRT		;BRANCH IF RIGHT
	CMPA	I,ROS		;LEFT SIDE
	BCC	IVRTL		;BRANCH IF LEFT
	BRA	WALCKE
IVRT:	LDAA	X,OBJHV
	BPL	WALCKE
NH:	COM	X,OBJHV
	COM	X,OBJHVL
				;SHIPS REFLECT PIC
	LDAB	D,X2+1
	CMPB	I,2
	BGE	WALCKE
	INX
	JSR	LRBOUND
	DEX
	BRA	WALCKE
IVRTL:	LDAA	X,OBJHV
	BPL	NH
	BRA	WALCKE
IVRTA:  CMPA	I,4C
	BCC	TP
	LDAA	X,OBJVV
	BPL	WALCKE
IV:	COM	X,OBJVV
	COM	X,OBJVVL
	LDAB	D,X2+1
	CMPB	I,2
	BGE	WALCKE
	INX
	JSR	VBOUND
	DEX
	BRA	WALCKE
TP:	LDAA	X,OBJVV
	BPL	IV
WALCKE:	LDAB	X,OBJHV
	STAB	D,HOLDHV
	JSR	E,DIV32
	STAA	D,TSTHV	
	STAB	D,TSTHVL	;SAVE DIVIDED VELOCITY FOR DECEL
	ADDB	X,OBJHL
	ADCA	X,OBJH
	STAB	X,OBJHL
	STAA	X,OBJH		;UPDATE HORIX POSN.
	DECA			;TO CENTER
	STAA	D,TSTH		;SAVE FOR COLLISION CHECK
	LDAB	X,OBJVV
	STAB	D,HOLDVV
	JSR	E,DIV32
	STAA	D,TSTVV
	STAB	D,TSTVVL
	ADDB	X,OBJVL
	ADCA	X,OBJV
	STAB	X,OBJVL
	STAA	X,OBJV		;UPDATE VERT. POSN.
	DECA
	STAA	D,TSTV		;SAVE FOR COLLISION CHECK
;GAMES 3&4 DECELERATE TO 10 (OR IF DAMMAGED)
	LDAA	D,X2+1		;SHIP?
	DECA
	BGT	DONE		;NO
	LDAA	X,STAT		;DECAL?
	BITA	I,6		;DAMMAGED?
	BNE	3$
	LSRA		;THRUST ON
	BCS	DONE		;NO
	LDAA	D,OPEN2		;PARTIAL BRAKE
	LSRA
	BCC	DONE
3$:	LDAA	X,OBJVV
	BPL	1$
	NEGA
1$:	CMPA	I,CRIPLE		;MAX SPEED FOR CRIPLE
	BGT	DECEL
	LDAA	X,OBJHV
	BPL	2$
	NEGA
2$:	CMPA	I,CRIPLE
	BLE	DONE
DECEL:	LDAA	X,OBJHV		;THIS SECTION SLOWS DOWN THE SHIP
	LDAB	X,OBJHVL	;FOR GAMES 3&4. ALSO WHEN DAMMAGED
	SUBB	D,TSTHVL
	SBCA	D,TSTHV
	BNE	1$
	CLRB
1$:	STAA	X,OBJHV
	STAB	X,OBJHVL
	LDAA	X,OBJVV
	LDAB	X,OBJVVL
	SUBB	D,TSTVVL
	SBCA	D,TSTVV
	BNE	2$
	CLRB
2$:	STAA	X,OBJVV
	STAB	X,OBJVVL
DONE:
	LDAA	D,GMSTAT
	BEQ	2$
;
;HIT SUN CHECK
;
	STX	D,X1		;IN CASE OF CALL TO COLCHK
	LDAA	D,TSTH
	CMPA	I,SUN+DIAM0+3	;@ SUN
	BHI	COLCHK
	CMPA	I,SUN-DIAM0-3
	BLS	COLCHK
	LDAA	D,TSTV
	CMPA	I,SUN+DIAM0+3
	BHI	COLCHK
	CMPA	I,SUN-DIAM0-4
	BLS	COLCHK
	LDAA	D,X1+1		;SUN HIT, OK TO START EXPLOSION?
	CMPA	I,1		;SPACE SHIP (NEVER ENTERS WITH 2 OR 3)
	BGT	1$
	LDAA	X,STAT		;ALREADY DEAD?
	BITA	I,60
	BNE	2$		;OR HYPER SPACE?
	LDAA	I,46
	STAA	D,FLAG
	JSR	EXPST		;EXPLODE
	CLR	X,FUEL0-1
	CLR	X,SHOT0-1
2$:	JMP	MUNXT
1$:	CMPA	I,11.		;ELSE BULLET
	BGT	2$
	JSR	CLROBJ
	BRA	2$
	.SBTTL	COLLISION CHECK
;***************************************
;* COLLISION CHECK ROUTINE
;* CHECKS THE OBJECT POINTED TO BY THE IX
;* (IX SET BY ABOVE MOVE ROUTINE) WITH BOTH
;* SHIPS LOOKING FOR A HIT.
;*
;* NOTE: THIS ROUTINE TO BE ENTERED FROM MOTION
;*	 ROUTINE ONLY.
;*
;* IX SET TO CONTENTS OF X2, A & B  CLOBERED
;*
;* PAGE 0:
;*	VARIOUS OBJ MOTION AND STATUS WORDS CHANGED
;*	X2, X1 CHANGED IF EXPLOSION STARTED
;*
;*
;* STACK SPACE: 9 BYTES
;*		(WORST CASE IF EXPLOSION STARTED)
;*
;**************************************************
COLCHK:	LDX	I,STION2		;INIT FOR SCAN OF SHIPS & STATIONS
CHKLP:	STX	D,X1
	LDAB	D,X1+1
	CMPB	I,STION1-1
	BNE	3$
	LDX	I,SHIP1		;SHIP NOW
	BRA	CHKLP
3$:	LDAB	D,TSTH
	CLR	E,FLAG
	TBA
	SUBA	X,OBJH
	BPL 	1$		;TAKE ABS VAL OF HORZ DISPLACEMENT
	NEGA
1$:	CMPA	I,DIAM0		;NOSE HIT?
	BHI	2$
	INC	E,FLAG
	BRA	CHKV
2$:	CMPA	I,DIAM-1	;SHIP HIT
	BLS	CHKV
CNEXT:	CPX	I,0
	BEQ	CNOT
	DEX
	BRA	CHKLP
CNOT:	LDX	D,X2		;RESTORE X
	JMP	MUNXT		;NEXT MOVE
CHKV:	CPX	D,X2		;SEE IF YOU ARE ME
	BEQ	CNEXT		;IF SO, KEEP SCANNING
	LDAA	D,TSTV
	LDAB	D,X2+1		;SPACE STATION?
	CMPB	I,STION1
	BLT	3$
	SUBA	I,04		;MOVE STATION V CENTER
3$:	SUBA	X,OBJV
	TAB
	BPL	1$
	NEGA
1$:	CMPA	I,DIAM0		;NOSE HIT?
	BHI	2$
	INC	E,FLAG		;IF 2, NOSE HIT
	BRA	SLORET
2$:	CMPA	I,DIAM-1
	BLS	SLORET
	LDAB	D,OPEN		;IS THIS A ROCK OR STATION?
	BITB	I,8		;ARE STATIONS ON?
	BEQ	CRET		;IF ROCK, NO EXTENDED CHECK
	LDAB	D,X2+1		;STATION
	CMPB	I,STION1
	BLT	CRET
	CMPA	I,2*DIAM-2	;STATIONS ARE 2 TIMES AS TALL
	BLS	SLORET
CRET:	LDAB	D,TSTH
	BRA	CNEXT
;*************************************************
;* OBJECT HIT --- START EXPLOSION
;* ON ENTRY: X2 = OTHER OBJECT #, X1 = SHIP HIT (OR BULLET)
;***************************************************
SLORET:
	LDAB	X,STAT
	BPL	CNOT		;SHIP IS OFF
;
;BULLET TO STATION (OR ROCK) HIT CHECK
;
	LDAB	D,X1+1		;IS THIS A SHIP OR A BULLET
	CMPB	I,SHIP1
	BLE	3$		;IF SHIP, CONTINUE TO REGULAR ROUTINE
	LDAB	D,X2+1		;IF HERE, SOMETHING HIT STATION
	CMPB	I,BULT0		;IS OTHER A BULLET?
	BLT	CNOT		;IF NO, WE DONT CARE
	CMPB	I,BULT3
	BGT	CNOT
	LDX	D,X2		;REMOVE BULLET
	JSR	CLROBJ
	LDAB	D,OPEN		;STATION OR ROCK?
	BITB	I,8		;IF ROCK...
	BNE	CNOT		;BLOW UP, ELSE END
	LDX	D,X1
	LDAA	I,2		;SET ACTIVE & EXPLODING
	BITA	X,STAT		;ALREADY EXPLODING?
	BNE	CNOT
	ORAA	X,STAT		;IF NOT SET BIT
	STAA	X,STAT
	JSR	EXPST2		;SOUND OUT
	BRA	CNOT
3$:	LDAB	D,X1+1
	EORB	D,X2+1			;IF BIT 1 A 1, DID NOT HIT SELF
;
; SINCE THE EVEN OBJ SHIP SHOOTS BULLETS WITH EVEN OBJ #,
; AND ODD FOR ODD, IF A 1 IS IN BIT 1, THEN THEY WERE
; NOT BOTH EVEN OR BOTH ODD.
; THIS CHECK IS SO THAT YOU DO NOT SHOOT YOURSELF
; UPON FIRST FIRING THE BULLET
;
	LSRB				;SET?
	BCS	10$
;
;DONT COLLIDE WITH OWN EXPLOSION
;
	LDAA	D,X2+1			;GET OBJECT NUMBER
	CMPA	I,EXPP0-1
	BLT	9$			;NOT EXPLOSION
	CMPA	I,EXPP0+1
	BLE	CNOT			;IS EXPLOSION SO MUST BE OWN (IF HERE)
9$:	LDX	D,X2			;CHECK "AGE" OF BULLET
	LDAB	X,STAT
	SUBB	D,TIMES			; REMOVE INITIAL COUNT
	ADDB	I,4			;IF MORE THAN 4 COUNTS OLD...
	BPL	14$
10$:	LDX	D,X2			;GOOD HIT. GET OTHER'S STAT & ...
	BEQ	12$		;SHIP HIT SHIP? IF YES, DON'T CLEAR
	CPX	I,1		;OTHER SHIP (IX=0 OR 1)
	BEQ	12$
	LDAA	D,X2+1		;GET OTHER OBJECTS NUMBER (WHAT IT IS!)
	CMPA	I,STION1		;DONT HIT SPACE STATIONS
	BGE	12$
	CMPA	I,EXPP0-1		;OR EXPLOSIONS
	BGT	12$		;THIS WOULD BE GARBAGE
11$:	JSR	CLROBJ		;REMOVE BULLET
12$:	LDAB	X,STAT		;OTHER IN HYPER SPACE OR INACTIVE
	BITB	I,60		;HYPER SPACE OR DESTROYED
	BEQ	13$
14$:	JMP	CNOT
13$:	CMPA	I,STION1		;STATION?
	BLT	BANG2
	LDX	D,X1
	JMP	STATHIT
BANG2:
	LDX	D,X1		;SHIP STATUS
	LDAA	X,STAT		;IS THIS SHIP IN HYPER OR GONE?
	BITA	I,60
	BNE	19$
	LDAA	D,FLAG		;DIRECT HIT?
	SUBA	I,2
	BNE	20$
15$:	LDAA	I,46		;DESTROYED
	STAA	D,FLAG
	BSR	EXPST
	CLR	X,SHOT0-1	;SHOTS OFF
	CLR	X,FUEL0-1
19$:	JMP	CNOT
20$:	LDAA	X,STAT		;PARTIAL DAMMAGE
	ANDA	I,6		;LOOK AT DAMMAGE
	CMPA	I,6		;IF 6, JUST NOSE LEFT SO..
	BEQ	15$		;DESTROY
	TAB			;GET RANDOM DAMMAGE (SAVE A)
	ORAA	D,POLY		;GET DAMMAGE
	ANDA	I,6		;LOOK AT DAMMAGE BITS
	CBA			;NO CHANGE?
	BEQ	15$		;IF NO CHANGE, BLOW UP
	STAA	D,FLAG
	TAB
	ORAA	X,STAT		;UPDATE STATUS
	STAA	X,STAT
	CMPB	I,6		;IF 6, NO FUEL LEFT
	BNE	25$
	CLR	X,FUEL0
25$:	BSR	EXPST
	BRA	19$
EXPST:	LDAB	D,X1+1			;START AN EXPLOSION
	ADDB	I,EXPP0+1		;OFFSET TO EXPLOSION
	STAB	D,X2+1			;POINT X2 TO THE EXPLOSION BYTES
	INC	E,X1+1			;CORRECT X1 FOR OTHER ROUTINES
	LDX	D,X2
	LDAA	I,80			;SET STATUS TO ACTIVE
	STAA	X,STAT-1			;START EXP.
	JSR	STATOBJ			;START FIRST EXP GOING WHERE SHIP WAS
	LDAA	X,OBJV-1		;CENTER
	ADDA	I,5
	STAA	X,OBJV-1
	LDAA	X,OBJH-1
	SUBA	I,4
	STAA	X,OBJH-1		;COMPENSATE FOR STATOBJ
	LDAA	I,EXPIC			;FIRST EXPLOSION PIC
	LDAB	D,FLAG		;FULLY DAMAGED SHIP?
	CMPB	I,46		;IF YES, ITS 6
	BEQ	1$		;IF YES, FULL EXPLOSION SEQUENCE
	ADDA	I,8.		;IF NO, SHORT SEQUENCE
1$:	STAA	X,DIR-1
	LDX	D,X1		;POINT BACK TO SHIP
	ORAB	X,STAT-1
	ANDB	I,0FE		;THRUST OFF
	STAB	X,STAT-1	;SHIP IS DESTROYED
;
;EXPLOSION SOUND START
;
EXPST2:	LDAA	X,OBJH-1		;GET HORIZ POSITION
	TAB
	COMB
	ANDB	I,0F0
	LSRA
	LSRA
	LSRA
	LSRA				;RIGHT CHANNEL LEVEL AVAT
	ADDA	D,SNDLR			;ADD TO SOUND LEVEL
	BITA	I,10
	BEQ	70$
	LDAA	I,0F			;MAX LEVEL
70$:	STAA	D,SNDLR			;RIGHT CHANNEL
	ADDB	D,SNDLL
	BCC	75$
	LDAB	I,0F0
75$:	STAB	D,SNDLL			;LEFT LEVEL
	RTS			;DONE (FOR NOW)
;SPACE STATION HIT
STATHIT:
	LDAA	D,OPEN		;STATIONS OFF
	BITA	I,8
	BEQ	1$		;MUST HAVE HIT ROCK
	LDAB	D,X1+1		;GET OBJECT HIT #	
	EORB	D,X2+1		;OWN SHIP ?
	LSRB			;PUT BIT IN CARRY
	BCC	2$		;IF BIT 1 & 0, YES
1$:	JMP	BANG2		;BLOW UP THE SHIP
2$:	LDAB	X,STAT
	BITB	I,60		;SAVE FOR LATER
	BNE	3$
	LDAA	I,18.		;RESET FUEL & SHOTS
	STAA	X,SHOT0
	LDAA	I,63
	STAA	X,FUEL0
	ANDB	I,80
	STAB	X,STAT
	CLR	X,OBJVV
	CLR	X,OBJHV
3$:	JMP	CNOT

	.SBTTL LOOKUP TABLES FOR  SIN & COS
CKM5:	.BYTE	0D5		;CKSUM 7800-7BFF
;
;COSINE TABLE
;
TBL2:	.BYTE	127.,125.,115.,100.,80.,56.,28.,0
	.BYTE	-28.,-56.,-80.,-100.,-115.,-125.,-127.
	.BYTE	-125.,-115.,-100.,-80.,-56.,-28.,0
	.BYTE	28.,56.,80.,100.,115.,125.,127.

FILR	=MODTBL-.
	.REPT	FILR
	.BYTE	0
	.ENDR
	.SBTTL	MODIFICATION TABLES
;
;**********************************************************
;*THE FOLLOWING 7 TABLES MUST LIE IN THE SAME PAGE
;**********************************************************
;
;GAME # VS MOD WORD TABLE (STORED INTO OPEN)
;
MODTBL:	.BYTE	2A,2A,2A,2,2,2,2,2,2,3
;
;SECOND OPTIONS (STORED INTO OPEN2)
;
MODTB2:	.BYTE 80,80,80,1,1,0,0,0,0,0
;ROTATION SPEEDS
ROTBL:	.BYTE	7,3,1,3,3,1,7,3,3,3
;ACCEL SPEED
ACTBL:	.BYTE	1,1,1,3,3,1,7,3,1,1
;BULLET SPEED
BULTBL: .BYTE	3,1,1,1,0,0,3,2,1,2
;BULLETS DURATION
TIMTBL:	.BYTE	0C0,97,97,97,0A0,0A0,0C0,0B0,97,0AA
;MAXIUM VELOCITY
MAXVTBL:.BYTE 3,2,1,30,01,01,65,45,25,01
;MOVE THE TABLE TO BOTTOM OF PAGE
;****************************************
;THE FOLLOWING 3 TABLES MUST LIE IN THE
;SAME PAGE.
;****************************************
;
;ROTATION TABLE. CONVERTS # 0-27. (DIRECTION INFO)
;TO PICTURE INFO AS NEEDED BY HARDWARE AS FOLLOWS:
;	D7 = UP/DOWN FLIP BIT
;	D6 = LEFT/RIGHT FLIP BIT
;	D5,D4,&D3 ARE ALT PIC SELECT
;	D2 - D0 = PICTURE INFO (8 ROTATIONS)
;
ROTTBL:
	.BYTE 0,1,2,3,4,5,6,7,46,45,44,43,42,41,40
	.BYTE 0C1,0C2,0C3,0C4,0C5,0C6,0C7,86,85,84,83,82,81
;
;HALFSPEC TABLE - USED TO SET BITS ACCORDING TO OBJECT #
;SEE DEFF OR 'HLFSP' ON PAGE 3
;
HSTBL:	.BYTE	0,80,0C0,80,0C0,1,1,1,1,1,1,1,1,3,3,3,3
;
;MASK TABLE-USED TO MASK OUT UNWANTED STATUS BITS FROM
;OBJECTS LIKE SHELLS, EXPLOSIONS, ETC SO THE REST OF THE
;BYTES MAY BE A TIMER
;
MSKTBL:	.BYTE 0,0FF,0FF,0FF,0FF,80,80,80,80,80,80,80,80,80,80,80,80
;
;TIME PER COIN.  FORMAT IS MINUTES, SECONDS IN BLD
;
TIMOPT:	.WORD	0030		;30 SECONDS
	.WORD	0100		;1 MINUTE
	.WORD	0130		;1 MINUTE, 30 SECONDS
	.WORD	0200		;2 MINUTES
	.WORD	0230		;2 MINUTES, 30 SECONDS
	.WORD	0300		;3 MINUTES
	.WORD	0330		;3 MINUTES, 30 SECONDS
	.WORD	0400		;4 MINUTES
;
;STAR OUTPUT TABLE MUST END WITH 00
;
STRTBL:	.WORD 314A,32AB,3051,31AF,31A2,3082,30D5,331B,3169,3065
	.WORD 324F,31B8,309E,3310,317C,306C,3274,30AB,3187,3074
	.WORD 336A,30BA,3154,325C,30D3,3162,3303,31E4,30E6,32CE
	.WORD 3216,30EB,3264,32D4
STBLE:	.WORD 0
FILR	=START-.
	.REPT FILR
	.BYTE 0
	.ENDR
	.=7C00

	.SBTTL PROGRAM ENTRY AND SELF TEST ROUTINE
;****************************************************
;*
;* PROGRAM ENTRY POINT AND SELF TEST ROUTINE START
;*
;******************************************************
START:
	LDS	I,TOSP		;SET STACK
	CLRA
	LDX	I,TOO
	STAA 	E,WTDOG
1$:	STAA	X,0		;CLEAR ALL WORKING RAM
	DEX
	CPX	I,PLAYF-1
	BNE	1$
	STAA	E,WTDOG
	LDX	I,100		;NOW PG 0
2$:	STAA	X,0
	DEX
	BNE	2$
	CLR	E,NOISE		;ALL SOUNDS OFF
	CLR	E,AMPL		;VOLUME TO 0
	LDAA	E,TSTSW
	BITA	I,TSTBIT	;SELF TEST ON?
	BEQ	STEST
	LDX	I,100		;DID RAM CLEAR
3$:	LDAA	X,0
	BNE	START		;IF NO, DO SELF TEST
	DEX
	BNE	3$
	LDAA	I,0FF		;INITIALIZE SWITCH DEBOUNCE
	STAA	D,SWT1
	STAA	D,SWT2
	LDAA	I,3		;START ROCK
	STAA	D,ROCKD
	JMP	GO		;NOT SELF TEST SO RUN
STEST:
;
;PAGE 0 TEST
;
	LDX	I,HTRSTL	;LEDS OFF
	LDAA	I,0FF
	STAA	X,3		;PANEL OFF
	STAA	X,5
	STAA	X,4
	CLRA
	STAA	X,0		;HEAT RESET OFF
	STAA	X,6		;HYPER SPACE OFF
	LDAA	I,08		;INIT AL RAM TO FIRST "OLD" PATTERN
	LDX	I,TOO
	STAA	E,WTDOG
1$:	STAA	X,0
	DEX
	CPX	I,PLAYF-1
	BNE	1$
	LDX	I,0FF
2$:	STAA	X,0
	DEX
	BNE	2$
	LDAA	I,11		;FIRST "NEW" PATTERN
5$:	LDX	I,0
10$:	STAA	X,0
	TAB
	LSRB			;RECONSTRUCT OLD PATTERN
	EORB	X,1		;STILL OLD?
	BNE	EORRA
	TAB			;GET NEW IN B
	EORB	X,0		;OLD STILL HOLDING?
	BNE	EORRA
	STAA	E,WTDOG
	INX
	CPX	I,0FF
	BNE	10$		;DONE?
	STAA	X,0		;DONT FORGET LAST
	TAB			;GET  OLD PATTERN FOR NEXT NEW
	ASLA			;SHIFT TO NEXT
	BCC	5$		;NOT DONE
	CLRB			;NO ERRORS
				;FALL THROUGH
EORRA:	LDX	I,HTRSTL
	CLRA
	BITB	I,0F		;LSB ERROR?
	BEQ	10$
	ORAA	I,1		;SET ERROR FLAG LSB
	STAA	X,1		;HEAT RESET LED ON FOR LSB
10$:	BITB	I,0F0		;ANY MSB TROUBLE?
	BEQ	20$
	ORAA	I,2		;TURN ON MSB FLAG
	STAA	X,7		;HYPER LED FOR MSB
20$:	ANDA	I,3		;ONLY THE ERRORS
	LDX	I,2000		;DELAY COUNTER
	LDAB	I,0E0		;HIGH NOTE FOR GOOD
	LSRA			;ERROR 1
	BCC	30$
	LDAB	I,20		;LOW FOR BAD
30$:	STAB 	E,NOTE		;OUTPUT
	LDAB	I,0FF		;SOUND ON
	STAB	E,AMPL
31$:	STAA	E,WTDOG		;DELAY LOOP ON NOTE
	DEX
	BNE	31$
	CLRB			;SILENT
	STAB	E,AMPL
	LDX	I,4000		;OFF DELAY LOOP
32$:	STAA	E,WTDOG
	DEX
	BNE	32$
	LDAB	I,0E0		;OTHER NOTE
	LSRA
	BCC	40$
	LDAB	I,20
40$:	STAB	E,NOTE
	LDX	I,2000		;ON DELAY TIME FOR OTHER RAM
	LDAB	I,0FF		;TURN ON
	STAB	E,AMPL		;SOUND ON
41$:	STAB	E,WTDOG
	DEX
	BNE	41$
	CLRB
	STAB	E,AMPL		;TURN OFF NOW
	LDAB	I,3
44$:	LDX	I,7FFF		;A DELAY BEFORE SCREEN RAM TEST
45$:	STAA	E,WTDOG
	DEX
	BNE	45$
	DECB
	BNE	44$
;
;SCREEN RAM TEST
;
SCRTST:	CLR	E,FLAG		;CLEAR THIS, NEXT INDICATOR
	CLR	E,R0		;SET TO 0 ERRORS
;AS YOU CAN SEE, THIS ROUTINE ASSUMES THAT PAGE 0 IS OK
	LDAA	I,11		;SET TO "NEW" PATTERN
5$:	LDX	I,PLAYF
10$:	STAA	X,0
	TAB			;GET OLD PATTERN
	LSRB
	EORB	X,1		;STILL OLD?
	BEQ	15$
	BSR	ERRO1		;NO, SET FOR OUTPUT AND RETURN
15$:	TAB			;NEW HOLDING
	EORB	X,0
	BEQ	16$
	BSR	ERROR
16$:	INX
	STAA	E,WTDOG
	CPX	I,TOO		;DONE?
	BNE	10$
	STAA	X,0		;UPDATE LAST
	TAB			;CONSTRUCT NEW NEXT PATTERN
	ASLA
	BCC	5$

OUTER:	LDAB	I,8
	STAB	D,X3		;PUT COUNT OF NOISES IN X3
	LDAA	D,R0		;OUTPUT ERRORS (IF ANY)
	COMA
	STAA	E,LEDLTCH
	STAA	E,LEDST0
	STAA	E,LEDST1
5$:	LDAB	I,020		;NOTE TIME, START WITH HIGH FOR GOOD
	LSRA			;ERROR?
	BCC	10$
	LDAB	I,0E0		;HIGH FOR GOOD
10$:	STAB	E,NOTE
	LDAB	I,0FF
	STAB	E,AMPL		;SOUND ON
	LDX	I,2000
15$:	STAA	E,WTDOG
	DEX
	BNE	15$
	COMB			;OFF
	STAB	E,AMPL
	LDX	I,4000		;OFF DELAY TIME
16$:	STAA	E,WTDOG
	DEX
	BNE	16$
	DEC	E,X3		;DONE?
	BNE	5$
	BRA	ROMTST
ERRO1:	INC	E,FLAG		;ERROR ON X,1
ERROR:
;
;BAD RAM AND RECOVER SUBROUTINE
;
	STAA	D,X2		;HOLD A
	STX	D,X1		;STORE IX TO GET BOTTOM 3 BITS
	LDAA	D,X1+1
	TST	E,FLAG
	BEQ	1$
	INCA
1$:	ANDA	I,3		;GOT THEM
	BITB	I,0F		;LSB ERROR?
	BEQ	10$		;NO
	ORAA	I,40		;SET BIT TO SHOW ERROR LATER
10$:	BITB	I,0F0		;MSB ERROR?
	BEQ	20$
	ORAA	I,80		;SET BIT TO SHOW ERROR LATER
20$:	TAB
	ANDB	I,0C0		;ISSOLATE ERROR BITS
	ANDA	I,03		;GET 3 BITS OF ADDRESS
30$:	DECA
	BMI	40$
	LSRB
	LSRB			;MOVE THE BITS INTO THE PROPER PLACE
	BRA	30$
40$:	ORAB	D,R0		;PUT IN WITH THE REST
	STAB	D,R0		;REPLACE
	CLR	E,FLAG		;DONE, RETURN TO UNKNOWN
	LDAA	D,X2		;GET A BACK
	RTS
ROMTST:	LDX	I,PLAYF		;WIDE PLAYFIELD
1$:	CLR	X,0
	INX
	CPX	I,PLAYF+400
	BNE	1$

;
;RAM MUST CHECK OUT GOOD TO ASSURE GOOD TEST
;
	LDAB	I,30		;ASCII 0
	CLR	E,R0
	LDX	I,6800		;BOTTOM
10$:	STX	D,X1		;GET END OF PASS ADDRESS
	LDAA	D,X1		;MSB + 4 = END ADDRESS
	ADDA	I,4
	STAA	D,X1
	CLRA			;SUM = 0
12$:	ADDA	X,0
	INX
	STAA	E,WTDOG		;JUST TO KEEP RUNNING
	CPX	D,X1		;DONE WITH PASS?
	BNE	12$
	INCA
	BEQ	13$
	STX	D,X2		;SAVE THIS ADDRESS
	LDX	I,TPCPL+10	;CLACULATE OUTPUT ADDRESS
	STX	D,X3
	TBA			;B=NUMBER OF PASS+30
	ADDA	D,X3+1
	STAA	D,X3+1
	LDX	D,X3
	STAB	X,0		;OUTPUT ERROR NUMBER
	STAB	D,R0		;SET ERROR FLAG FOR NO 'OK'
	LDX	D,X2		;GET ADDRESS OF TESTING BACK
13$:	INCB			;NEXT?
	CMPB	I,36		;IF 36 WERE DONE
;30=6000-63FF, 31=6400-67FF, 32=6800-6BFF, 33=6C00-6FFF
;34=7000-73FF, 35=7400-77FF, 36=END OF TEST
	BNE	10$
	LDAB	D,R0		;ANY ERROS
	BNE	SWTEST
	LDX	I,0F0B		;WRITE OK IF OK
	STX	E,TPCPL+20
;
;SWITCH AND SOUND TEST
;
SWTEST:	LDX	I,PICTURE	;TEST PATTERN
	LDAA	I,TESTPAT		;IN MOTION OBJECTS
	STAA	X,0		;0&1 - OUTPUT PIC
	STAA	X,4
	LDAA	I,70		;NON H POSITION
	STAA	X,2
	ADDA	I,10
	STAA	X,6
	LDAA	I,25		;NON V POSITION
	STAA	X,1
	STAA	X,5
	LDAA	I,3		;ALT ROM, NO STRETCH
	STAA	X,3
	LDAA	I,1
	STAA	X,7		;ALT ROM, STRETCH
10$:	STAA	E,WTDOG
	CLRA
	LDX	I,HTRSTL	;ALL LEDS ON
	STAA	X,3
	STAA	X,5
	STAA	X,4
	STAA	X,1
	STAA	X,7
;
;GRAPHICS TEST
;
	CLRB			;OUTPUT CHAR ROM
	LDX	I,PLAYF
12$:	STAB	X,0
	INX
	INCB
	BNE	12$
	STAA	E,SWST0		;BUS SET TO INPUT
	LDAA	E,IN08		;SET UP FOR XOR OF ALL SWITCHES
	STAA	D,X1
	LDAA	E,IN10
	STAA	D,X2
	LDAA	E,IN18
	STAA	D,X3
SWST2:	LDAB	I,30		;ASCII START SETUP
	LDAA	E,PANL1		;READ THE TOUCH SWITCHES
12$:	ASLA			;PUSHED?
	BCC	15$
	INCB			;NO .... NEXT
	CMPB	I,38		;READ ALL?
	BNE	12$
	LDAA	E,PANL2		;OTHER INPUT (8,9,& GAME RESET)
	RORA			;GM->C,9->0,8->1
	RORA			;GM->7,9->C,8->0
	RORA			;GM->6,9->7,8->C
	RORA			;SO THE BELOW LOOP WORKS
13$:	ASLA			;SWITCH PUSHED
	BCC	15$
	INCB			;NEXT NUMBER
	CMPB	I,3B		;DONE?
	BNE	13$
	CLRA
	STAA	E,TPCPL
	BRA	20$
15$:	TBA			;OUTPUT NUMBER OF SWITCH AND TONE
	CMPA	I,3A
	BNE	16$
	ADDA	I,7		;MAKE NOTHING AN 'A'
16$:	STAA	E,TPCPL
	ASLB			;CREATE A NOTE 00 - A0 IN STEPS OF 10
	ASLB
	ASLB			;DONT WORRY ABOUT THE ASCII 30...
	ASLB			;IT SHIFTS OUT THE END
	ADDB	I,20
	STAB	E,NOTE
	LDAA	I,0FF
20$:	STAA	E,AMPL		;SOUND OUT OR NOT
	STAA	E,WTDOG
SWLP:	LDAA	E,IN08
	TAB
	EORA	D,X1		;ANY CHANGE?
	BEQ	30$
	STAB	D,X1
	BRA	SOUNB
30$:	LDAA	E,IN10
	TAB
	EORA	D,X2
	BEQ	40$
	STAB	D,X2
	BRA	SOUNB
40$:	LDAA	E,IN18
	TAB
	EORA	D,X3
	BEQ	50$
	STAB	D,X3
	BRA	SOUNB
50$:	LDAA	E,PANL2		;READ HEAT RESET
	CLRB			;GUESS NO SOUND
	ANDA	I,10		;ONLY HEAT RESET
	BNE	51$
	LDAB	I,0FF		;SOUND ON
51$:	STAB	E,NOISE
	TSTA			;TEST AGAIN
	BEQ	SOUNB
SWOT:	LDAA	E,PANL2
	BITA	I,20
	BNE	2$
	JMP	DIAG
2$:	LDAA	E,TSTSW
	BITA	I,TSTBIT	;TEST OFF?
	BNE	1$
	JMP	SWST2
1$:	WAI			;DO RESET
SOUNB:
	LDX	I,1000		;SOUND PULSE
	STAA	E,BUZZ+1
1$:	STAA	E,WTDOG
	DEX
	BNE	1$
	STAA	E,BUZZ
	BRA	SWOT
	.VCTRS 7FF8,IRQ,START,NMI,START
	.END
                                                                                                                                                       